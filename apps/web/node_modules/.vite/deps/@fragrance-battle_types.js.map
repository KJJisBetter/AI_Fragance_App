{
  "version": 3,
  "sources": ["../../../../../packages/types/src/index.ts"],
  "sourcesContent": ["// Database Models\nexport interface User {\n  id: string;\n  email: string;\n  username: string;\n  passwordHash: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Fragrance {\n  id: string;\n  name: string;\n  brand: string;\n  year?: number;\n  concentration?: string;\n  topNotes: string[];\n  middleNotes: string[];\n  baseNotes: string[];\n  aiSeasons: string[];\n  aiOccasions: string[];\n  aiMoods: string[];\n  fragranticaSeasons: string[];\n  communityRating?: number;\n  verified: boolean;\n  longevity?: number;\n  sillage?: number;\n  projection?: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Collection {\n  id: string;\n  userId: string;\n  name: string;\n  description?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface CollectionItem {\n  id: string;\n  collectionId: string;\n  fragranceId: string;\n  personalRating?: number;\n  personalNotes?: string;\n  purchaseDate?: Date;\n  bottleSize?: string;\n  createdAt: Date;\n}\n\nexport interface Battle {\n  id: string;\n  userId: string;\n  title: string;\n  description?: string;\n  status: BattleStatus;\n  createdAt: Date;\n  completedAt?: Date;\n}\n\nexport interface BattleItem {\n  id: string;\n  battleId: string;\n  fragranceId: string;\n  position: number;\n  votes: number;\n  winner: boolean;\n}\n\nexport interface AICategorFeedback {\n  id: string;\n  userId: string;\n  fragranceId: string;\n  aiSuggestion: Record<string, any>;\n  userCorrection: Record<string, any>;\n  feedbackType: string;\n  createdAt: Date;\n}\n\nexport enum BattleStatus {\n  ACTIVE = 'ACTIVE',\n  COMPLETED = 'COMPLETED',\n  CANCELLED = 'CANCELLED'\n}\n\n// API Request/Response Types\nexport interface LoginRequest {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterRequest {\n  email: string;\n  username: string;\n  password: string;\n}\n\nexport interface AuthResponse {\n  user: Omit<User, 'passwordHash'>;\n  token: string;\n}\n\nexport interface CreateFragranceRequest {\n  name: string;\n  brand: string;\n  year?: number;\n  concentration?: string;\n  topNotes: string[];\n  middleNotes: string[];\n  baseNotes: string[];\n}\n\nexport interface UpdateFragranceRequest extends Partial<CreateFragranceRequest> {\n  id: string;\n}\n\nexport interface CreateCollectionRequest {\n  name: string;\n  description?: string;\n}\n\nexport interface AddToCollectionRequest {\n  fragranceId: string;\n  personalRating?: number;\n  personalNotes?: string;\n  bottleSize?: string;\n}\n\nexport interface CreateBattleRequest {\n  title: string;\n  description?: string;\n  fragranceIds: string[];\n}\n\nexport interface VoteBattleRequest {\n  fragranceId: string;\n}\n\nexport interface AICategorFeedbackRequest {\n  fragranceId: string;\n  aiSuggestion: Record<string, any>;\n  userCorrection: Record<string, any>;\n  feedbackType: string;\n}\n\n// AI Service Types\nexport interface AICategorization {\n  seasons: string[];\n  occasions: string[];\n  moods: string[];\n  confidence: number;\n}\n\nexport interface AICategorizationRequest {\n  name: string;\n  brand: string;\n  topNotes: string[];\n  middleNotes: string[];\n  baseNotes: string[];\n  year?: number;\n  concentration?: string;\n}\n\nexport interface AICategorizationResponse {\n  categorization: AICategorization;\n  reasoning: string;\n}\n\n// Search and Filter Types\nexport interface FragranceSearchFilters {\n  brand?: string;\n  season?: string;\n  occasion?: string;\n  mood?: string;\n  yearFrom?: number;\n  yearTo?: number;\n  concentration?: string;\n  verified?: boolean;\n}\n\nexport interface FragranceSearchRequest {\n  query?: string;\n  filters?: FragranceSearchFilters;\n  page?: number;\n  limit?: number;\n  sortBy?: 'name' | 'brand' | 'year' | 'rating' | 'createdAt';\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport interface FragranceSearchResponse {\n  fragrances: Fragrance[];\n  total: number;\n  page: number;\n  limit: number;\n  totalPages: number;\n}\n\n// Collection Response Types\nexport interface CollectionWithItems extends Collection {\n  items: (CollectionItem & { fragrance: Fragrance })[];\n}\n\nexport interface BattleWithItems extends Battle {\n  items: (BattleItem & { fragrance: Fragrance })[];\n}\n\n// Error Types\nexport interface APIError {\n  message: string;\n  code: string;\n  details?: Record<string, any>;\n}\n\n// Utility Types\nexport interface PaginatedResponse<T> {\n  data: T[];\n  total: number;\n  page: number;\n  limit: number;\n  totalPages: number;\n}\n\nexport interface APIResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: APIError;\n}\n\n// CSV Import Types\nexport interface FragranceCSVRow {\n  name: string;\n  brand: string;\n  year?: string;\n  concentration?: string;\n  topNotes: string;\n  middleNotes: string;\n  baseNotes: string;\n  fragranticaSeasons?: string;\n  communityRating?: string;\n  longevity?: string;\n  sillage?: string;\n  projection?: string;\n}\n\n// Analytics Types\nexport interface UserAnalytics {\n  totalFragrances: number;\n  totalBattles: number;\n  favoriteSeasons: string[];\n  favoriteOccasions: string[];\n  averageRating: number;\n  mostUsedBrands: string[];\n}\n\nexport interface BattleAnalytics {\n  totalVotes: number;\n  winRate: number;\n  popularityScore: number;\n  seasonalPreference: Record<string, number>;\n}\n\n// Constants\nexport const FRAGRANCE_SEASONS = ['Spring', 'Summer', 'Fall', 'Winter'] as const;\nexport const FRAGRANCE_OCCASIONS = ['Daily', 'Evening', 'Formal', 'Casual', 'Date', 'Work'] as const;\nexport const FRAGRANCE_MOODS = ['Fresh', 'Confident', 'Sophisticated', 'Playful', 'Romantic', 'Energetic'] as const;\nexport const FRAGRANCE_CONCENTRATIONS = ['EDT', 'EDP', 'Parfum', 'Cologne', 'Eau Fraiche'] as const;\n\nexport type FragranceSeason = typeof FRAGRANCE_SEASONS[number];\nexport type FragranceOccasion = typeof FRAGRANCE_OCCASIONS[number];\nexport type FragranceMood = typeof FRAGRANCE_MOODS[number];\nexport type FragranceConcentration = typeof FRAGRANCE_CONCENTRATIONS[number];\n"],
  "mappings": ";;;;;;;;;AAiFA,QAAY;AAAZ,KAAA,SAAYA,eAAY;AACtB,MAAAA,cAAA,QAAA,IAAA;AACA,MAAAA,cAAA,WAAA,IAAA;AACA,MAAAA,cAAA,WAAA,IAAA;IACF,GAJY,iBAAY,QAAA,eAAZ,eAAY,CAAA,EAAA;AAuLX,YAAA,oBAAoB,CAAC,UAAU,UAAU,QAAQ,QAAQ;AACzD,YAAA,sBAAsB,CAAC,SAAS,WAAW,UAAU,UAAU,QAAQ,MAAM;AAC7E,YAAA,kBAAkB,CAAC,SAAS,aAAa,iBAAiB,WAAW,YAAY,WAAW;AAC5F,YAAA,2BAA2B,CAAC,OAAO,OAAO,UAAU,WAAW,aAAa;;;",
  "names": ["BattleStatus"]
}
