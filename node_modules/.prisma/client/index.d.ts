
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Fragrance
 * 
 */
export type Fragrance = $Result.DefaultSelection<Prisma.$FragrancePayload>
/**
 * Model Collection
 * 
 */
export type Collection = $Result.DefaultSelection<Prisma.$CollectionPayload>
/**
 * Model CollectionItem
 * 
 */
export type CollectionItem = $Result.DefaultSelection<Prisma.$CollectionItemPayload>
/**
 * Model Battle
 * 
 */
export type Battle = $Result.DefaultSelection<Prisma.$BattlePayload>
/**
 * Model BattleItem
 * 
 */
export type BattleItem = $Result.DefaultSelection<Prisma.$BattleItemPayload>
/**
 * Model AICategorFeedback
 * 
 */
export type AICategorFeedback = $Result.DefaultSelection<Prisma.$AICategorFeedbackPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const BattleStatus: {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type BattleStatus = (typeof BattleStatus)[keyof typeof BattleStatus]

}

export type BattleStatus = $Enums.BattleStatus

export const BattleStatus: typeof $Enums.BattleStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.fragrance`: Exposes CRUD operations for the **Fragrance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fragrances
    * const fragrances = await prisma.fragrance.findMany()
    * ```
    */
  get fragrance(): Prisma.FragranceDelegate<ExtArgs>;

  /**
   * `prisma.collection`: Exposes CRUD operations for the **Collection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Collections
    * const collections = await prisma.collection.findMany()
    * ```
    */
  get collection(): Prisma.CollectionDelegate<ExtArgs>;

  /**
   * `prisma.collectionItem`: Exposes CRUD operations for the **CollectionItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CollectionItems
    * const collectionItems = await prisma.collectionItem.findMany()
    * ```
    */
  get collectionItem(): Prisma.CollectionItemDelegate<ExtArgs>;

  /**
   * `prisma.battle`: Exposes CRUD operations for the **Battle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Battles
    * const battles = await prisma.battle.findMany()
    * ```
    */
  get battle(): Prisma.BattleDelegate<ExtArgs>;

  /**
   * `prisma.battleItem`: Exposes CRUD operations for the **BattleItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BattleItems
    * const battleItems = await prisma.battleItem.findMany()
    * ```
    */
  get battleItem(): Prisma.BattleItemDelegate<ExtArgs>;

  /**
   * `prisma.aICategorFeedback`: Exposes CRUD operations for the **AICategorFeedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AICategorFeedbacks
    * const aICategorFeedbacks = await prisma.aICategorFeedback.findMany()
    * ```
    */
  get aICategorFeedback(): Prisma.AICategorFeedbackDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Fragrance: 'Fragrance',
    Collection: 'Collection',
    CollectionItem: 'CollectionItem',
    Battle: 'Battle',
    BattleItem: 'BattleItem',
    AICategorFeedback: 'AICategorFeedback'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "fragrance" | "collection" | "collectionItem" | "battle" | "battleItem" | "aICategorFeedback"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Fragrance: {
        payload: Prisma.$FragrancePayload<ExtArgs>
        fields: Prisma.FragranceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FragranceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FragrancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FragranceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FragrancePayload>
          }
          findFirst: {
            args: Prisma.FragranceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FragrancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FragranceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FragrancePayload>
          }
          findMany: {
            args: Prisma.FragranceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FragrancePayload>[]
          }
          create: {
            args: Prisma.FragranceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FragrancePayload>
          }
          createMany: {
            args: Prisma.FragranceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FragranceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FragrancePayload>[]
          }
          delete: {
            args: Prisma.FragranceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FragrancePayload>
          }
          update: {
            args: Prisma.FragranceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FragrancePayload>
          }
          deleteMany: {
            args: Prisma.FragranceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FragranceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FragranceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FragrancePayload>
          }
          aggregate: {
            args: Prisma.FragranceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFragrance>
          }
          groupBy: {
            args: Prisma.FragranceGroupByArgs<ExtArgs>
            result: $Utils.Optional<FragranceGroupByOutputType>[]
          }
          count: {
            args: Prisma.FragranceCountArgs<ExtArgs>
            result: $Utils.Optional<FragranceCountAggregateOutputType> | number
          }
        }
      }
      Collection: {
        payload: Prisma.$CollectionPayload<ExtArgs>
        fields: Prisma.CollectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CollectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CollectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          findFirst: {
            args: Prisma.CollectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CollectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          findMany: {
            args: Prisma.CollectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>[]
          }
          create: {
            args: Prisma.CollectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          createMany: {
            args: Prisma.CollectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CollectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>[]
          }
          delete: {
            args: Prisma.CollectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          update: {
            args: Prisma.CollectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          deleteMany: {
            args: Prisma.CollectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CollectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CollectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          aggregate: {
            args: Prisma.CollectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCollection>
          }
          groupBy: {
            args: Prisma.CollectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CollectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CollectionCountArgs<ExtArgs>
            result: $Utils.Optional<CollectionCountAggregateOutputType> | number
          }
        }
      }
      CollectionItem: {
        payload: Prisma.$CollectionItemPayload<ExtArgs>
        fields: Prisma.CollectionItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CollectionItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CollectionItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionItemPayload>
          }
          findFirst: {
            args: Prisma.CollectionItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CollectionItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionItemPayload>
          }
          findMany: {
            args: Prisma.CollectionItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionItemPayload>[]
          }
          create: {
            args: Prisma.CollectionItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionItemPayload>
          }
          createMany: {
            args: Prisma.CollectionItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CollectionItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionItemPayload>[]
          }
          delete: {
            args: Prisma.CollectionItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionItemPayload>
          }
          update: {
            args: Prisma.CollectionItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionItemPayload>
          }
          deleteMany: {
            args: Prisma.CollectionItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CollectionItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CollectionItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionItemPayload>
          }
          aggregate: {
            args: Prisma.CollectionItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCollectionItem>
          }
          groupBy: {
            args: Prisma.CollectionItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<CollectionItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.CollectionItemCountArgs<ExtArgs>
            result: $Utils.Optional<CollectionItemCountAggregateOutputType> | number
          }
        }
      }
      Battle: {
        payload: Prisma.$BattlePayload<ExtArgs>
        fields: Prisma.BattleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BattleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BattleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload>
          }
          findFirst: {
            args: Prisma.BattleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BattleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload>
          }
          findMany: {
            args: Prisma.BattleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload>[]
          }
          create: {
            args: Prisma.BattleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload>
          }
          createMany: {
            args: Prisma.BattleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BattleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload>[]
          }
          delete: {
            args: Prisma.BattleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload>
          }
          update: {
            args: Prisma.BattleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload>
          }
          deleteMany: {
            args: Prisma.BattleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BattleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BattleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload>
          }
          aggregate: {
            args: Prisma.BattleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBattle>
          }
          groupBy: {
            args: Prisma.BattleGroupByArgs<ExtArgs>
            result: $Utils.Optional<BattleGroupByOutputType>[]
          }
          count: {
            args: Prisma.BattleCountArgs<ExtArgs>
            result: $Utils.Optional<BattleCountAggregateOutputType> | number
          }
        }
      }
      BattleItem: {
        payload: Prisma.$BattleItemPayload<ExtArgs>
        fields: Prisma.BattleItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BattleItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BattleItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleItemPayload>
          }
          findFirst: {
            args: Prisma.BattleItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BattleItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleItemPayload>
          }
          findMany: {
            args: Prisma.BattleItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleItemPayload>[]
          }
          create: {
            args: Prisma.BattleItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleItemPayload>
          }
          createMany: {
            args: Prisma.BattleItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BattleItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleItemPayload>[]
          }
          delete: {
            args: Prisma.BattleItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleItemPayload>
          }
          update: {
            args: Prisma.BattleItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleItemPayload>
          }
          deleteMany: {
            args: Prisma.BattleItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BattleItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BattleItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleItemPayload>
          }
          aggregate: {
            args: Prisma.BattleItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBattleItem>
          }
          groupBy: {
            args: Prisma.BattleItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<BattleItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.BattleItemCountArgs<ExtArgs>
            result: $Utils.Optional<BattleItemCountAggregateOutputType> | number
          }
        }
      }
      AICategorFeedback: {
        payload: Prisma.$AICategorFeedbackPayload<ExtArgs>
        fields: Prisma.AICategorFeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AICategorFeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICategorFeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AICategorFeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICategorFeedbackPayload>
          }
          findFirst: {
            args: Prisma.AICategorFeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICategorFeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AICategorFeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICategorFeedbackPayload>
          }
          findMany: {
            args: Prisma.AICategorFeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICategorFeedbackPayload>[]
          }
          create: {
            args: Prisma.AICategorFeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICategorFeedbackPayload>
          }
          createMany: {
            args: Prisma.AICategorFeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AICategorFeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICategorFeedbackPayload>[]
          }
          delete: {
            args: Prisma.AICategorFeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICategorFeedbackPayload>
          }
          update: {
            args: Prisma.AICategorFeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICategorFeedbackPayload>
          }
          deleteMany: {
            args: Prisma.AICategorFeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AICategorFeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AICategorFeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICategorFeedbackPayload>
          }
          aggregate: {
            args: Prisma.AICategorFeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAICategorFeedback>
          }
          groupBy: {
            args: Prisma.AICategorFeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<AICategorFeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.AICategorFeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<AICategorFeedbackCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    collections: number
    battles: number
    feedbacks: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    collections?: boolean | UserCountOutputTypeCountCollectionsArgs
    battles?: boolean | UserCountOutputTypeCountBattlesArgs
    feedbacks?: boolean | UserCountOutputTypeCountFeedbacksArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCollectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBattlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BattleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AICategorFeedbackWhereInput
  }


  /**
   * Count Type FragranceCountOutputType
   */

  export type FragranceCountOutputType = {
    collections: number
    battleItems: number
    feedbacks: number
  }

  export type FragranceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    collections?: boolean | FragranceCountOutputTypeCountCollectionsArgs
    battleItems?: boolean | FragranceCountOutputTypeCountBattleItemsArgs
    feedbacks?: boolean | FragranceCountOutputTypeCountFeedbacksArgs
  }

  // Custom InputTypes
  /**
   * FragranceCountOutputType without action
   */
  export type FragranceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FragranceCountOutputType
     */
    select?: FragranceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FragranceCountOutputType without action
   */
  export type FragranceCountOutputTypeCountCollectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionItemWhereInput
  }

  /**
   * FragranceCountOutputType without action
   */
  export type FragranceCountOutputTypeCountBattleItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BattleItemWhereInput
  }

  /**
   * FragranceCountOutputType without action
   */
  export type FragranceCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AICategorFeedbackWhereInput
  }


  /**
   * Count Type CollectionCountOutputType
   */

  export type CollectionCountOutputType = {
    items: number
  }

  export type CollectionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | CollectionCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * CollectionCountOutputType without action
   */
  export type CollectionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionCountOutputType
     */
    select?: CollectionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CollectionCountOutputType without action
   */
  export type CollectionCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionItemWhereInput
  }


  /**
   * Count Type BattleCountOutputType
   */

  export type BattleCountOutputType = {
    items: number
  }

  export type BattleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | BattleCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * BattleCountOutputType without action
   */
  export type BattleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleCountOutputType
     */
    select?: BattleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BattleCountOutputType without action
   */
  export type BattleCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BattleItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    passwordHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    passwordHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    passwordHash: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    passwordHash?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    passwordHash?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    passwordHash?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string
    passwordHash: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    collections?: boolean | User$collectionsArgs<ExtArgs>
    battles?: boolean | User$battlesArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    collections?: boolean | User$collectionsArgs<ExtArgs>
    battles?: boolean | User$battlesArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      collections: Prisma.$CollectionPayload<ExtArgs>[]
      battles: Prisma.$BattlePayload<ExtArgs>[]
      feedbacks: Prisma.$AICategorFeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string
      passwordHash: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    collections<T extends User$collectionsArgs<ExtArgs> = {}>(args?: Subset<T, User$collectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findMany"> | Null>
    battles<T extends User$battlesArgs<ExtArgs> = {}>(args?: Subset<T, User$battlesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "findMany"> | Null>
    feedbacks<T extends User$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, User$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AICategorFeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.collections
   */
  export type User$collectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    where?: CollectionWhereInput
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    cursor?: CollectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }

  /**
   * User.battles
   */
  export type User$battlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    where?: BattleWhereInput
    orderBy?: BattleOrderByWithRelationInput | BattleOrderByWithRelationInput[]
    cursor?: BattleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BattleScalarFieldEnum | BattleScalarFieldEnum[]
  }

  /**
   * User.feedbacks
   */
  export type User$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICategorFeedback
     */
    select?: AICategorFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AICategorFeedbackInclude<ExtArgs> | null
    where?: AICategorFeedbackWhereInput
    orderBy?: AICategorFeedbackOrderByWithRelationInput | AICategorFeedbackOrderByWithRelationInput[]
    cursor?: AICategorFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AICategorFeedbackScalarFieldEnum | AICategorFeedbackScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Fragrance
   */

  export type AggregateFragrance = {
    _count: FragranceCountAggregateOutputType | null
    _avg: FragranceAvgAggregateOutputType | null
    _sum: FragranceSumAggregateOutputType | null
    _min: FragranceMinAggregateOutputType | null
    _max: FragranceMaxAggregateOutputType | null
  }

  export type FragranceAvgAggregateOutputType = {
    year: number | null
    communityRating: number | null
    longevity: number | null
    sillage: number | null
    projection: number | null
  }

  export type FragranceSumAggregateOutputType = {
    year: number | null
    communityRating: number | null
    longevity: number | null
    sillage: number | null
    projection: number | null
  }

  export type FragranceMinAggregateOutputType = {
    id: string | null
    name: string | null
    brand: string | null
    year: number | null
    concentration: string | null
    communityRating: number | null
    verified: boolean | null
    longevity: number | null
    sillage: number | null
    projection: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FragranceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    brand: string | null
    year: number | null
    concentration: string | null
    communityRating: number | null
    verified: boolean | null
    longevity: number | null
    sillage: number | null
    projection: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FragranceCountAggregateOutputType = {
    id: number
    name: number
    brand: number
    year: number
    concentration: number
    topNotes: number
    middleNotes: number
    baseNotes: number
    aiSeasons: number
    aiOccasions: number
    aiMoods: number
    fragranticaSeasons: number
    communityRating: number
    verified: number
    longevity: number
    sillage: number
    projection: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FragranceAvgAggregateInputType = {
    year?: true
    communityRating?: true
    longevity?: true
    sillage?: true
    projection?: true
  }

  export type FragranceSumAggregateInputType = {
    year?: true
    communityRating?: true
    longevity?: true
    sillage?: true
    projection?: true
  }

  export type FragranceMinAggregateInputType = {
    id?: true
    name?: true
    brand?: true
    year?: true
    concentration?: true
    communityRating?: true
    verified?: true
    longevity?: true
    sillage?: true
    projection?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FragranceMaxAggregateInputType = {
    id?: true
    name?: true
    brand?: true
    year?: true
    concentration?: true
    communityRating?: true
    verified?: true
    longevity?: true
    sillage?: true
    projection?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FragranceCountAggregateInputType = {
    id?: true
    name?: true
    brand?: true
    year?: true
    concentration?: true
    topNotes?: true
    middleNotes?: true
    baseNotes?: true
    aiSeasons?: true
    aiOccasions?: true
    aiMoods?: true
    fragranticaSeasons?: true
    communityRating?: true
    verified?: true
    longevity?: true
    sillage?: true
    projection?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FragranceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fragrance to aggregate.
     */
    where?: FragranceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fragrances to fetch.
     */
    orderBy?: FragranceOrderByWithRelationInput | FragranceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FragranceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fragrances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fragrances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fragrances
    **/
    _count?: true | FragranceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FragranceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FragranceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FragranceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FragranceMaxAggregateInputType
  }

  export type GetFragranceAggregateType<T extends FragranceAggregateArgs> = {
        [P in keyof T & keyof AggregateFragrance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFragrance[P]>
      : GetScalarType<T[P], AggregateFragrance[P]>
  }




  export type FragranceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FragranceWhereInput
    orderBy?: FragranceOrderByWithAggregationInput | FragranceOrderByWithAggregationInput[]
    by: FragranceScalarFieldEnum[] | FragranceScalarFieldEnum
    having?: FragranceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FragranceCountAggregateInputType | true
    _avg?: FragranceAvgAggregateInputType
    _sum?: FragranceSumAggregateInputType
    _min?: FragranceMinAggregateInputType
    _max?: FragranceMaxAggregateInputType
  }

  export type FragranceGroupByOutputType = {
    id: string
    name: string
    brand: string
    year: number | null
    concentration: string | null
    topNotes: string[]
    middleNotes: string[]
    baseNotes: string[]
    aiSeasons: string[]
    aiOccasions: string[]
    aiMoods: string[]
    fragranticaSeasons: string[]
    communityRating: number | null
    verified: boolean
    longevity: number | null
    sillage: number | null
    projection: number | null
    createdAt: Date
    updatedAt: Date
    _count: FragranceCountAggregateOutputType | null
    _avg: FragranceAvgAggregateOutputType | null
    _sum: FragranceSumAggregateOutputType | null
    _min: FragranceMinAggregateOutputType | null
    _max: FragranceMaxAggregateOutputType | null
  }

  type GetFragranceGroupByPayload<T extends FragranceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FragranceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FragranceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FragranceGroupByOutputType[P]>
            : GetScalarType<T[P], FragranceGroupByOutputType[P]>
        }
      >
    >


  export type FragranceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    brand?: boolean
    year?: boolean
    concentration?: boolean
    topNotes?: boolean
    middleNotes?: boolean
    baseNotes?: boolean
    aiSeasons?: boolean
    aiOccasions?: boolean
    aiMoods?: boolean
    fragranticaSeasons?: boolean
    communityRating?: boolean
    verified?: boolean
    longevity?: boolean
    sillage?: boolean
    projection?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    collections?: boolean | Fragrance$collectionsArgs<ExtArgs>
    battleItems?: boolean | Fragrance$battleItemsArgs<ExtArgs>
    feedbacks?: boolean | Fragrance$feedbacksArgs<ExtArgs>
    _count?: boolean | FragranceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fragrance"]>

  export type FragranceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    brand?: boolean
    year?: boolean
    concentration?: boolean
    topNotes?: boolean
    middleNotes?: boolean
    baseNotes?: boolean
    aiSeasons?: boolean
    aiOccasions?: boolean
    aiMoods?: boolean
    fragranticaSeasons?: boolean
    communityRating?: boolean
    verified?: boolean
    longevity?: boolean
    sillage?: boolean
    projection?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["fragrance"]>

  export type FragranceSelectScalar = {
    id?: boolean
    name?: boolean
    brand?: boolean
    year?: boolean
    concentration?: boolean
    topNotes?: boolean
    middleNotes?: boolean
    baseNotes?: boolean
    aiSeasons?: boolean
    aiOccasions?: boolean
    aiMoods?: boolean
    fragranticaSeasons?: boolean
    communityRating?: boolean
    verified?: boolean
    longevity?: boolean
    sillage?: boolean
    projection?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FragranceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    collections?: boolean | Fragrance$collectionsArgs<ExtArgs>
    battleItems?: boolean | Fragrance$battleItemsArgs<ExtArgs>
    feedbacks?: boolean | Fragrance$feedbacksArgs<ExtArgs>
    _count?: boolean | FragranceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FragranceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FragrancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Fragrance"
    objects: {
      collections: Prisma.$CollectionItemPayload<ExtArgs>[]
      battleItems: Prisma.$BattleItemPayload<ExtArgs>[]
      feedbacks: Prisma.$AICategorFeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      brand: string
      year: number | null
      concentration: string | null
      topNotes: string[]
      middleNotes: string[]
      baseNotes: string[]
      aiSeasons: string[]
      aiOccasions: string[]
      aiMoods: string[]
      fragranticaSeasons: string[]
      communityRating: number | null
      verified: boolean
      longevity: number | null
      sillage: number | null
      projection: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["fragrance"]>
    composites: {}
  }

  type FragranceGetPayload<S extends boolean | null | undefined | FragranceDefaultArgs> = $Result.GetResult<Prisma.$FragrancePayload, S>

  type FragranceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FragranceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FragranceCountAggregateInputType | true
    }

  export interface FragranceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Fragrance'], meta: { name: 'Fragrance' } }
    /**
     * Find zero or one Fragrance that matches the filter.
     * @param {FragranceFindUniqueArgs} args - Arguments to find a Fragrance
     * @example
     * // Get one Fragrance
     * const fragrance = await prisma.fragrance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FragranceFindUniqueArgs>(args: SelectSubset<T, FragranceFindUniqueArgs<ExtArgs>>): Prisma__FragranceClient<$Result.GetResult<Prisma.$FragrancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Fragrance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FragranceFindUniqueOrThrowArgs} args - Arguments to find a Fragrance
     * @example
     * // Get one Fragrance
     * const fragrance = await prisma.fragrance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FragranceFindUniqueOrThrowArgs>(args: SelectSubset<T, FragranceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FragranceClient<$Result.GetResult<Prisma.$FragrancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Fragrance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FragranceFindFirstArgs} args - Arguments to find a Fragrance
     * @example
     * // Get one Fragrance
     * const fragrance = await prisma.fragrance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FragranceFindFirstArgs>(args?: SelectSubset<T, FragranceFindFirstArgs<ExtArgs>>): Prisma__FragranceClient<$Result.GetResult<Prisma.$FragrancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Fragrance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FragranceFindFirstOrThrowArgs} args - Arguments to find a Fragrance
     * @example
     * // Get one Fragrance
     * const fragrance = await prisma.fragrance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FragranceFindFirstOrThrowArgs>(args?: SelectSubset<T, FragranceFindFirstOrThrowArgs<ExtArgs>>): Prisma__FragranceClient<$Result.GetResult<Prisma.$FragrancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Fragrances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FragranceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fragrances
     * const fragrances = await prisma.fragrance.findMany()
     * 
     * // Get first 10 Fragrances
     * const fragrances = await prisma.fragrance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fragranceWithIdOnly = await prisma.fragrance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FragranceFindManyArgs>(args?: SelectSubset<T, FragranceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FragrancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Fragrance.
     * @param {FragranceCreateArgs} args - Arguments to create a Fragrance.
     * @example
     * // Create one Fragrance
     * const Fragrance = await prisma.fragrance.create({
     *   data: {
     *     // ... data to create a Fragrance
     *   }
     * })
     * 
     */
    create<T extends FragranceCreateArgs>(args: SelectSubset<T, FragranceCreateArgs<ExtArgs>>): Prisma__FragranceClient<$Result.GetResult<Prisma.$FragrancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Fragrances.
     * @param {FragranceCreateManyArgs} args - Arguments to create many Fragrances.
     * @example
     * // Create many Fragrances
     * const fragrance = await prisma.fragrance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FragranceCreateManyArgs>(args?: SelectSubset<T, FragranceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Fragrances and returns the data saved in the database.
     * @param {FragranceCreateManyAndReturnArgs} args - Arguments to create many Fragrances.
     * @example
     * // Create many Fragrances
     * const fragrance = await prisma.fragrance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Fragrances and only return the `id`
     * const fragranceWithIdOnly = await prisma.fragrance.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FragranceCreateManyAndReturnArgs>(args?: SelectSubset<T, FragranceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FragrancePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Fragrance.
     * @param {FragranceDeleteArgs} args - Arguments to delete one Fragrance.
     * @example
     * // Delete one Fragrance
     * const Fragrance = await prisma.fragrance.delete({
     *   where: {
     *     // ... filter to delete one Fragrance
     *   }
     * })
     * 
     */
    delete<T extends FragranceDeleteArgs>(args: SelectSubset<T, FragranceDeleteArgs<ExtArgs>>): Prisma__FragranceClient<$Result.GetResult<Prisma.$FragrancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Fragrance.
     * @param {FragranceUpdateArgs} args - Arguments to update one Fragrance.
     * @example
     * // Update one Fragrance
     * const fragrance = await prisma.fragrance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FragranceUpdateArgs>(args: SelectSubset<T, FragranceUpdateArgs<ExtArgs>>): Prisma__FragranceClient<$Result.GetResult<Prisma.$FragrancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Fragrances.
     * @param {FragranceDeleteManyArgs} args - Arguments to filter Fragrances to delete.
     * @example
     * // Delete a few Fragrances
     * const { count } = await prisma.fragrance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FragranceDeleteManyArgs>(args?: SelectSubset<T, FragranceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fragrances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FragranceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fragrances
     * const fragrance = await prisma.fragrance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FragranceUpdateManyArgs>(args: SelectSubset<T, FragranceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fragrance.
     * @param {FragranceUpsertArgs} args - Arguments to update or create a Fragrance.
     * @example
     * // Update or create a Fragrance
     * const fragrance = await prisma.fragrance.upsert({
     *   create: {
     *     // ... data to create a Fragrance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fragrance we want to update
     *   }
     * })
     */
    upsert<T extends FragranceUpsertArgs>(args: SelectSubset<T, FragranceUpsertArgs<ExtArgs>>): Prisma__FragranceClient<$Result.GetResult<Prisma.$FragrancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Fragrances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FragranceCountArgs} args - Arguments to filter Fragrances to count.
     * @example
     * // Count the number of Fragrances
     * const count = await prisma.fragrance.count({
     *   where: {
     *     // ... the filter for the Fragrances we want to count
     *   }
     * })
    **/
    count<T extends FragranceCountArgs>(
      args?: Subset<T, FragranceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FragranceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fragrance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FragranceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FragranceAggregateArgs>(args: Subset<T, FragranceAggregateArgs>): Prisma.PrismaPromise<GetFragranceAggregateType<T>>

    /**
     * Group by Fragrance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FragranceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FragranceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FragranceGroupByArgs['orderBy'] }
        : { orderBy?: FragranceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FragranceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFragranceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Fragrance model
   */
  readonly fields: FragranceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Fragrance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FragranceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    collections<T extends Fragrance$collectionsArgs<ExtArgs> = {}>(args?: Subset<T, Fragrance$collectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionItemPayload<ExtArgs>, T, "findMany"> | Null>
    battleItems<T extends Fragrance$battleItemsArgs<ExtArgs> = {}>(args?: Subset<T, Fragrance$battleItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattleItemPayload<ExtArgs>, T, "findMany"> | Null>
    feedbacks<T extends Fragrance$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, Fragrance$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AICategorFeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Fragrance model
   */ 
  interface FragranceFieldRefs {
    readonly id: FieldRef<"Fragrance", 'String'>
    readonly name: FieldRef<"Fragrance", 'String'>
    readonly brand: FieldRef<"Fragrance", 'String'>
    readonly year: FieldRef<"Fragrance", 'Int'>
    readonly concentration: FieldRef<"Fragrance", 'String'>
    readonly topNotes: FieldRef<"Fragrance", 'String[]'>
    readonly middleNotes: FieldRef<"Fragrance", 'String[]'>
    readonly baseNotes: FieldRef<"Fragrance", 'String[]'>
    readonly aiSeasons: FieldRef<"Fragrance", 'String[]'>
    readonly aiOccasions: FieldRef<"Fragrance", 'String[]'>
    readonly aiMoods: FieldRef<"Fragrance", 'String[]'>
    readonly fragranticaSeasons: FieldRef<"Fragrance", 'String[]'>
    readonly communityRating: FieldRef<"Fragrance", 'Float'>
    readonly verified: FieldRef<"Fragrance", 'Boolean'>
    readonly longevity: FieldRef<"Fragrance", 'Int'>
    readonly sillage: FieldRef<"Fragrance", 'Int'>
    readonly projection: FieldRef<"Fragrance", 'Int'>
    readonly createdAt: FieldRef<"Fragrance", 'DateTime'>
    readonly updatedAt: FieldRef<"Fragrance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Fragrance findUnique
   */
  export type FragranceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fragrance
     */
    select?: FragranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FragranceInclude<ExtArgs> | null
    /**
     * Filter, which Fragrance to fetch.
     */
    where: FragranceWhereUniqueInput
  }

  /**
   * Fragrance findUniqueOrThrow
   */
  export type FragranceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fragrance
     */
    select?: FragranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FragranceInclude<ExtArgs> | null
    /**
     * Filter, which Fragrance to fetch.
     */
    where: FragranceWhereUniqueInput
  }

  /**
   * Fragrance findFirst
   */
  export type FragranceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fragrance
     */
    select?: FragranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FragranceInclude<ExtArgs> | null
    /**
     * Filter, which Fragrance to fetch.
     */
    where?: FragranceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fragrances to fetch.
     */
    orderBy?: FragranceOrderByWithRelationInput | FragranceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fragrances.
     */
    cursor?: FragranceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fragrances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fragrances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fragrances.
     */
    distinct?: FragranceScalarFieldEnum | FragranceScalarFieldEnum[]
  }

  /**
   * Fragrance findFirstOrThrow
   */
  export type FragranceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fragrance
     */
    select?: FragranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FragranceInclude<ExtArgs> | null
    /**
     * Filter, which Fragrance to fetch.
     */
    where?: FragranceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fragrances to fetch.
     */
    orderBy?: FragranceOrderByWithRelationInput | FragranceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fragrances.
     */
    cursor?: FragranceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fragrances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fragrances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fragrances.
     */
    distinct?: FragranceScalarFieldEnum | FragranceScalarFieldEnum[]
  }

  /**
   * Fragrance findMany
   */
  export type FragranceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fragrance
     */
    select?: FragranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FragranceInclude<ExtArgs> | null
    /**
     * Filter, which Fragrances to fetch.
     */
    where?: FragranceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fragrances to fetch.
     */
    orderBy?: FragranceOrderByWithRelationInput | FragranceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fragrances.
     */
    cursor?: FragranceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fragrances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fragrances.
     */
    skip?: number
    distinct?: FragranceScalarFieldEnum | FragranceScalarFieldEnum[]
  }

  /**
   * Fragrance create
   */
  export type FragranceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fragrance
     */
    select?: FragranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FragranceInclude<ExtArgs> | null
    /**
     * The data needed to create a Fragrance.
     */
    data: XOR<FragranceCreateInput, FragranceUncheckedCreateInput>
  }

  /**
   * Fragrance createMany
   */
  export type FragranceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Fragrances.
     */
    data: FragranceCreateManyInput | FragranceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Fragrance createManyAndReturn
   */
  export type FragranceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fragrance
     */
    select?: FragranceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Fragrances.
     */
    data: FragranceCreateManyInput | FragranceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Fragrance update
   */
  export type FragranceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fragrance
     */
    select?: FragranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FragranceInclude<ExtArgs> | null
    /**
     * The data needed to update a Fragrance.
     */
    data: XOR<FragranceUpdateInput, FragranceUncheckedUpdateInput>
    /**
     * Choose, which Fragrance to update.
     */
    where: FragranceWhereUniqueInput
  }

  /**
   * Fragrance updateMany
   */
  export type FragranceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Fragrances.
     */
    data: XOR<FragranceUpdateManyMutationInput, FragranceUncheckedUpdateManyInput>
    /**
     * Filter which Fragrances to update
     */
    where?: FragranceWhereInput
  }

  /**
   * Fragrance upsert
   */
  export type FragranceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fragrance
     */
    select?: FragranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FragranceInclude<ExtArgs> | null
    /**
     * The filter to search for the Fragrance to update in case it exists.
     */
    where: FragranceWhereUniqueInput
    /**
     * In case the Fragrance found by the `where` argument doesn't exist, create a new Fragrance with this data.
     */
    create: XOR<FragranceCreateInput, FragranceUncheckedCreateInput>
    /**
     * In case the Fragrance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FragranceUpdateInput, FragranceUncheckedUpdateInput>
  }

  /**
   * Fragrance delete
   */
  export type FragranceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fragrance
     */
    select?: FragranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FragranceInclude<ExtArgs> | null
    /**
     * Filter which Fragrance to delete.
     */
    where: FragranceWhereUniqueInput
  }

  /**
   * Fragrance deleteMany
   */
  export type FragranceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fragrances to delete
     */
    where?: FragranceWhereInput
  }

  /**
   * Fragrance.collections
   */
  export type Fragrance$collectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionItem
     */
    select?: CollectionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionItemInclude<ExtArgs> | null
    where?: CollectionItemWhereInput
    orderBy?: CollectionItemOrderByWithRelationInput | CollectionItemOrderByWithRelationInput[]
    cursor?: CollectionItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollectionItemScalarFieldEnum | CollectionItemScalarFieldEnum[]
  }

  /**
   * Fragrance.battleItems
   */
  export type Fragrance$battleItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleItem
     */
    select?: BattleItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleItemInclude<ExtArgs> | null
    where?: BattleItemWhereInput
    orderBy?: BattleItemOrderByWithRelationInput | BattleItemOrderByWithRelationInput[]
    cursor?: BattleItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BattleItemScalarFieldEnum | BattleItemScalarFieldEnum[]
  }

  /**
   * Fragrance.feedbacks
   */
  export type Fragrance$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICategorFeedback
     */
    select?: AICategorFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AICategorFeedbackInclude<ExtArgs> | null
    where?: AICategorFeedbackWhereInput
    orderBy?: AICategorFeedbackOrderByWithRelationInput | AICategorFeedbackOrderByWithRelationInput[]
    cursor?: AICategorFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AICategorFeedbackScalarFieldEnum | AICategorFeedbackScalarFieldEnum[]
  }

  /**
   * Fragrance without action
   */
  export type FragranceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fragrance
     */
    select?: FragranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FragranceInclude<ExtArgs> | null
  }


  /**
   * Model Collection
   */

  export type AggregateCollection = {
    _count: CollectionCountAggregateOutputType | null
    _min: CollectionMinAggregateOutputType | null
    _max: CollectionMaxAggregateOutputType | null
  }

  export type CollectionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CollectionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CollectionCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CollectionMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CollectionMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CollectionCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CollectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Collection to aggregate.
     */
    where?: CollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collections to fetch.
     */
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Collections
    **/
    _count?: true | CollectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollectionMaxAggregateInputType
  }

  export type GetCollectionAggregateType<T extends CollectionAggregateArgs> = {
        [P in keyof T & keyof AggregateCollection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollection[P]>
      : GetScalarType<T[P], AggregateCollection[P]>
  }




  export type CollectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionWhereInput
    orderBy?: CollectionOrderByWithAggregationInput | CollectionOrderByWithAggregationInput[]
    by: CollectionScalarFieldEnum[] | CollectionScalarFieldEnum
    having?: CollectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollectionCountAggregateInputType | true
    _min?: CollectionMinAggregateInputType
    _max?: CollectionMaxAggregateInputType
  }

  export type CollectionGroupByOutputType = {
    id: string
    userId: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: CollectionCountAggregateOutputType | null
    _min: CollectionMinAggregateOutputType | null
    _max: CollectionMaxAggregateOutputType | null
  }

  type GetCollectionGroupByPayload<T extends CollectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CollectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollectionGroupByOutputType[P]>
            : GetScalarType<T[P], CollectionGroupByOutputType[P]>
        }
      >
    >


  export type CollectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | Collection$itemsArgs<ExtArgs>
    _count?: boolean | CollectionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collection"]>

  export type CollectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collection"]>

  export type CollectionSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CollectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | Collection$itemsArgs<ExtArgs>
    _count?: boolean | CollectionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CollectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CollectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Collection"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      items: Prisma.$CollectionItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["collection"]>
    composites: {}
  }

  type CollectionGetPayload<S extends boolean | null | undefined | CollectionDefaultArgs> = $Result.GetResult<Prisma.$CollectionPayload, S>

  type CollectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CollectionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CollectionCountAggregateInputType | true
    }

  export interface CollectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Collection'], meta: { name: 'Collection' } }
    /**
     * Find zero or one Collection that matches the filter.
     * @param {CollectionFindUniqueArgs} args - Arguments to find a Collection
     * @example
     * // Get one Collection
     * const collection = await prisma.collection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CollectionFindUniqueArgs>(args: SelectSubset<T, CollectionFindUniqueArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Collection that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CollectionFindUniqueOrThrowArgs} args - Arguments to find a Collection
     * @example
     * // Get one Collection
     * const collection = await prisma.collection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CollectionFindUniqueOrThrowArgs>(args: SelectSubset<T, CollectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Collection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionFindFirstArgs} args - Arguments to find a Collection
     * @example
     * // Get one Collection
     * const collection = await prisma.collection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CollectionFindFirstArgs>(args?: SelectSubset<T, CollectionFindFirstArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Collection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionFindFirstOrThrowArgs} args - Arguments to find a Collection
     * @example
     * // Get one Collection
     * const collection = await prisma.collection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CollectionFindFirstOrThrowArgs>(args?: SelectSubset<T, CollectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Collections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Collections
     * const collections = await prisma.collection.findMany()
     * 
     * // Get first 10 Collections
     * const collections = await prisma.collection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const collectionWithIdOnly = await prisma.collection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CollectionFindManyArgs>(args?: SelectSubset<T, CollectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Collection.
     * @param {CollectionCreateArgs} args - Arguments to create a Collection.
     * @example
     * // Create one Collection
     * const Collection = await prisma.collection.create({
     *   data: {
     *     // ... data to create a Collection
     *   }
     * })
     * 
     */
    create<T extends CollectionCreateArgs>(args: SelectSubset<T, CollectionCreateArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Collections.
     * @param {CollectionCreateManyArgs} args - Arguments to create many Collections.
     * @example
     * // Create many Collections
     * const collection = await prisma.collection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CollectionCreateManyArgs>(args?: SelectSubset<T, CollectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Collections and returns the data saved in the database.
     * @param {CollectionCreateManyAndReturnArgs} args - Arguments to create many Collections.
     * @example
     * // Create many Collections
     * const collection = await prisma.collection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Collections and only return the `id`
     * const collectionWithIdOnly = await prisma.collection.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CollectionCreateManyAndReturnArgs>(args?: SelectSubset<T, CollectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Collection.
     * @param {CollectionDeleteArgs} args - Arguments to delete one Collection.
     * @example
     * // Delete one Collection
     * const Collection = await prisma.collection.delete({
     *   where: {
     *     // ... filter to delete one Collection
     *   }
     * })
     * 
     */
    delete<T extends CollectionDeleteArgs>(args: SelectSubset<T, CollectionDeleteArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Collection.
     * @param {CollectionUpdateArgs} args - Arguments to update one Collection.
     * @example
     * // Update one Collection
     * const collection = await prisma.collection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CollectionUpdateArgs>(args: SelectSubset<T, CollectionUpdateArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Collections.
     * @param {CollectionDeleteManyArgs} args - Arguments to filter Collections to delete.
     * @example
     * // Delete a few Collections
     * const { count } = await prisma.collection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CollectionDeleteManyArgs>(args?: SelectSubset<T, CollectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Collections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Collections
     * const collection = await prisma.collection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CollectionUpdateManyArgs>(args: SelectSubset<T, CollectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Collection.
     * @param {CollectionUpsertArgs} args - Arguments to update or create a Collection.
     * @example
     * // Update or create a Collection
     * const collection = await prisma.collection.upsert({
     *   create: {
     *     // ... data to create a Collection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Collection we want to update
     *   }
     * })
     */
    upsert<T extends CollectionUpsertArgs>(args: SelectSubset<T, CollectionUpsertArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Collections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionCountArgs} args - Arguments to filter Collections to count.
     * @example
     * // Count the number of Collections
     * const count = await prisma.collection.count({
     *   where: {
     *     // ... the filter for the Collections we want to count
     *   }
     * })
    **/
    count<T extends CollectionCountArgs>(
      args?: Subset<T, CollectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Collection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollectionAggregateArgs>(args: Subset<T, CollectionAggregateArgs>): Prisma.PrismaPromise<GetCollectionAggregateType<T>>

    /**
     * Group by Collection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollectionGroupByArgs['orderBy'] }
        : { orderBy?: CollectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Collection model
   */
  readonly fields: CollectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Collection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CollectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    items<T extends Collection$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Collection$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Collection model
   */ 
  interface CollectionFieldRefs {
    readonly id: FieldRef<"Collection", 'String'>
    readonly userId: FieldRef<"Collection", 'String'>
    readonly name: FieldRef<"Collection", 'String'>
    readonly description: FieldRef<"Collection", 'String'>
    readonly createdAt: FieldRef<"Collection", 'DateTime'>
    readonly updatedAt: FieldRef<"Collection", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Collection findUnique
   */
  export type CollectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collection to fetch.
     */
    where: CollectionWhereUniqueInput
  }

  /**
   * Collection findUniqueOrThrow
   */
  export type CollectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collection to fetch.
     */
    where: CollectionWhereUniqueInput
  }

  /**
   * Collection findFirst
   */
  export type CollectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collection to fetch.
     */
    where?: CollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collections to fetch.
     */
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Collections.
     */
    cursor?: CollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Collections.
     */
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }

  /**
   * Collection findFirstOrThrow
   */
  export type CollectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collection to fetch.
     */
    where?: CollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collections to fetch.
     */
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Collections.
     */
    cursor?: CollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Collections.
     */
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }

  /**
   * Collection findMany
   */
  export type CollectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collections to fetch.
     */
    where?: CollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collections to fetch.
     */
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Collections.
     */
    cursor?: CollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collections.
     */
    skip?: number
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }

  /**
   * Collection create
   */
  export type CollectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Collection.
     */
    data: XOR<CollectionCreateInput, CollectionUncheckedCreateInput>
  }

  /**
   * Collection createMany
   */
  export type CollectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Collections.
     */
    data: CollectionCreateManyInput | CollectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Collection createManyAndReturn
   */
  export type CollectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Collections.
     */
    data: CollectionCreateManyInput | CollectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Collection update
   */
  export type CollectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Collection.
     */
    data: XOR<CollectionUpdateInput, CollectionUncheckedUpdateInput>
    /**
     * Choose, which Collection to update.
     */
    where: CollectionWhereUniqueInput
  }

  /**
   * Collection updateMany
   */
  export type CollectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Collections.
     */
    data: XOR<CollectionUpdateManyMutationInput, CollectionUncheckedUpdateManyInput>
    /**
     * Filter which Collections to update
     */
    where?: CollectionWhereInput
  }

  /**
   * Collection upsert
   */
  export type CollectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Collection to update in case it exists.
     */
    where: CollectionWhereUniqueInput
    /**
     * In case the Collection found by the `where` argument doesn't exist, create a new Collection with this data.
     */
    create: XOR<CollectionCreateInput, CollectionUncheckedCreateInput>
    /**
     * In case the Collection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CollectionUpdateInput, CollectionUncheckedUpdateInput>
  }

  /**
   * Collection delete
   */
  export type CollectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter which Collection to delete.
     */
    where: CollectionWhereUniqueInput
  }

  /**
   * Collection deleteMany
   */
  export type CollectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Collections to delete
     */
    where?: CollectionWhereInput
  }

  /**
   * Collection.items
   */
  export type Collection$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionItem
     */
    select?: CollectionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionItemInclude<ExtArgs> | null
    where?: CollectionItemWhereInput
    orderBy?: CollectionItemOrderByWithRelationInput | CollectionItemOrderByWithRelationInput[]
    cursor?: CollectionItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollectionItemScalarFieldEnum | CollectionItemScalarFieldEnum[]
  }

  /**
   * Collection without action
   */
  export type CollectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
  }


  /**
   * Model CollectionItem
   */

  export type AggregateCollectionItem = {
    _count: CollectionItemCountAggregateOutputType | null
    _avg: CollectionItemAvgAggregateOutputType | null
    _sum: CollectionItemSumAggregateOutputType | null
    _min: CollectionItemMinAggregateOutputType | null
    _max: CollectionItemMaxAggregateOutputType | null
  }

  export type CollectionItemAvgAggregateOutputType = {
    personalRating: number | null
  }

  export type CollectionItemSumAggregateOutputType = {
    personalRating: number | null
  }

  export type CollectionItemMinAggregateOutputType = {
    id: string | null
    collectionId: string | null
    fragranceId: string | null
    personalRating: number | null
    personalNotes: string | null
    purchaseDate: Date | null
    bottleSize: string | null
    createdAt: Date | null
  }

  export type CollectionItemMaxAggregateOutputType = {
    id: string | null
    collectionId: string | null
    fragranceId: string | null
    personalRating: number | null
    personalNotes: string | null
    purchaseDate: Date | null
    bottleSize: string | null
    createdAt: Date | null
  }

  export type CollectionItemCountAggregateOutputType = {
    id: number
    collectionId: number
    fragranceId: number
    personalRating: number
    personalNotes: number
    purchaseDate: number
    bottleSize: number
    createdAt: number
    _all: number
  }


  export type CollectionItemAvgAggregateInputType = {
    personalRating?: true
  }

  export type CollectionItemSumAggregateInputType = {
    personalRating?: true
  }

  export type CollectionItemMinAggregateInputType = {
    id?: true
    collectionId?: true
    fragranceId?: true
    personalRating?: true
    personalNotes?: true
    purchaseDate?: true
    bottleSize?: true
    createdAt?: true
  }

  export type CollectionItemMaxAggregateInputType = {
    id?: true
    collectionId?: true
    fragranceId?: true
    personalRating?: true
    personalNotes?: true
    purchaseDate?: true
    bottleSize?: true
    createdAt?: true
  }

  export type CollectionItemCountAggregateInputType = {
    id?: true
    collectionId?: true
    fragranceId?: true
    personalRating?: true
    personalNotes?: true
    purchaseDate?: true
    bottleSize?: true
    createdAt?: true
    _all?: true
  }

  export type CollectionItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollectionItem to aggregate.
     */
    where?: CollectionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionItems to fetch.
     */
    orderBy?: CollectionItemOrderByWithRelationInput | CollectionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CollectionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CollectionItems
    **/
    _count?: true | CollectionItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CollectionItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CollectionItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollectionItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollectionItemMaxAggregateInputType
  }

  export type GetCollectionItemAggregateType<T extends CollectionItemAggregateArgs> = {
        [P in keyof T & keyof AggregateCollectionItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollectionItem[P]>
      : GetScalarType<T[P], AggregateCollectionItem[P]>
  }




  export type CollectionItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionItemWhereInput
    orderBy?: CollectionItemOrderByWithAggregationInput | CollectionItemOrderByWithAggregationInput[]
    by: CollectionItemScalarFieldEnum[] | CollectionItemScalarFieldEnum
    having?: CollectionItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollectionItemCountAggregateInputType | true
    _avg?: CollectionItemAvgAggregateInputType
    _sum?: CollectionItemSumAggregateInputType
    _min?: CollectionItemMinAggregateInputType
    _max?: CollectionItemMaxAggregateInputType
  }

  export type CollectionItemGroupByOutputType = {
    id: string
    collectionId: string
    fragranceId: string
    personalRating: number | null
    personalNotes: string | null
    purchaseDate: Date | null
    bottleSize: string | null
    createdAt: Date
    _count: CollectionItemCountAggregateOutputType | null
    _avg: CollectionItemAvgAggregateOutputType | null
    _sum: CollectionItemSumAggregateOutputType | null
    _min: CollectionItemMinAggregateOutputType | null
    _max: CollectionItemMaxAggregateOutputType | null
  }

  type GetCollectionItemGroupByPayload<T extends CollectionItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CollectionItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollectionItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollectionItemGroupByOutputType[P]>
            : GetScalarType<T[P], CollectionItemGroupByOutputType[P]>
        }
      >
    >


  export type CollectionItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    collectionId?: boolean
    fragranceId?: boolean
    personalRating?: boolean
    personalNotes?: boolean
    purchaseDate?: boolean
    bottleSize?: boolean
    createdAt?: boolean
    collection?: boolean | CollectionDefaultArgs<ExtArgs>
    fragrance?: boolean | FragranceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collectionItem"]>

  export type CollectionItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    collectionId?: boolean
    fragranceId?: boolean
    personalRating?: boolean
    personalNotes?: boolean
    purchaseDate?: boolean
    bottleSize?: boolean
    createdAt?: boolean
    collection?: boolean | CollectionDefaultArgs<ExtArgs>
    fragrance?: boolean | FragranceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collectionItem"]>

  export type CollectionItemSelectScalar = {
    id?: boolean
    collectionId?: boolean
    fragranceId?: boolean
    personalRating?: boolean
    personalNotes?: boolean
    purchaseDate?: boolean
    bottleSize?: boolean
    createdAt?: boolean
  }

  export type CollectionItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    collection?: boolean | CollectionDefaultArgs<ExtArgs>
    fragrance?: boolean | FragranceDefaultArgs<ExtArgs>
  }
  export type CollectionItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    collection?: boolean | CollectionDefaultArgs<ExtArgs>
    fragrance?: boolean | FragranceDefaultArgs<ExtArgs>
  }

  export type $CollectionItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CollectionItem"
    objects: {
      collection: Prisma.$CollectionPayload<ExtArgs>
      fragrance: Prisma.$FragrancePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      collectionId: string
      fragranceId: string
      personalRating: number | null
      personalNotes: string | null
      purchaseDate: Date | null
      bottleSize: string | null
      createdAt: Date
    }, ExtArgs["result"]["collectionItem"]>
    composites: {}
  }

  type CollectionItemGetPayload<S extends boolean | null | undefined | CollectionItemDefaultArgs> = $Result.GetResult<Prisma.$CollectionItemPayload, S>

  type CollectionItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CollectionItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CollectionItemCountAggregateInputType | true
    }

  export interface CollectionItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CollectionItem'], meta: { name: 'CollectionItem' } }
    /**
     * Find zero or one CollectionItem that matches the filter.
     * @param {CollectionItemFindUniqueArgs} args - Arguments to find a CollectionItem
     * @example
     * // Get one CollectionItem
     * const collectionItem = await prisma.collectionItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CollectionItemFindUniqueArgs>(args: SelectSubset<T, CollectionItemFindUniqueArgs<ExtArgs>>): Prisma__CollectionItemClient<$Result.GetResult<Prisma.$CollectionItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CollectionItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CollectionItemFindUniqueOrThrowArgs} args - Arguments to find a CollectionItem
     * @example
     * // Get one CollectionItem
     * const collectionItem = await prisma.collectionItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CollectionItemFindUniqueOrThrowArgs>(args: SelectSubset<T, CollectionItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CollectionItemClient<$Result.GetResult<Prisma.$CollectionItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CollectionItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionItemFindFirstArgs} args - Arguments to find a CollectionItem
     * @example
     * // Get one CollectionItem
     * const collectionItem = await prisma.collectionItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CollectionItemFindFirstArgs>(args?: SelectSubset<T, CollectionItemFindFirstArgs<ExtArgs>>): Prisma__CollectionItemClient<$Result.GetResult<Prisma.$CollectionItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CollectionItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionItemFindFirstOrThrowArgs} args - Arguments to find a CollectionItem
     * @example
     * // Get one CollectionItem
     * const collectionItem = await prisma.collectionItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CollectionItemFindFirstOrThrowArgs>(args?: SelectSubset<T, CollectionItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__CollectionItemClient<$Result.GetResult<Prisma.$CollectionItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CollectionItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CollectionItems
     * const collectionItems = await prisma.collectionItem.findMany()
     * 
     * // Get first 10 CollectionItems
     * const collectionItems = await prisma.collectionItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const collectionItemWithIdOnly = await prisma.collectionItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CollectionItemFindManyArgs>(args?: SelectSubset<T, CollectionItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CollectionItem.
     * @param {CollectionItemCreateArgs} args - Arguments to create a CollectionItem.
     * @example
     * // Create one CollectionItem
     * const CollectionItem = await prisma.collectionItem.create({
     *   data: {
     *     // ... data to create a CollectionItem
     *   }
     * })
     * 
     */
    create<T extends CollectionItemCreateArgs>(args: SelectSubset<T, CollectionItemCreateArgs<ExtArgs>>): Prisma__CollectionItemClient<$Result.GetResult<Prisma.$CollectionItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CollectionItems.
     * @param {CollectionItemCreateManyArgs} args - Arguments to create many CollectionItems.
     * @example
     * // Create many CollectionItems
     * const collectionItem = await prisma.collectionItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CollectionItemCreateManyArgs>(args?: SelectSubset<T, CollectionItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CollectionItems and returns the data saved in the database.
     * @param {CollectionItemCreateManyAndReturnArgs} args - Arguments to create many CollectionItems.
     * @example
     * // Create many CollectionItems
     * const collectionItem = await prisma.collectionItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CollectionItems and only return the `id`
     * const collectionItemWithIdOnly = await prisma.collectionItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CollectionItemCreateManyAndReturnArgs>(args?: SelectSubset<T, CollectionItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CollectionItem.
     * @param {CollectionItemDeleteArgs} args - Arguments to delete one CollectionItem.
     * @example
     * // Delete one CollectionItem
     * const CollectionItem = await prisma.collectionItem.delete({
     *   where: {
     *     // ... filter to delete one CollectionItem
     *   }
     * })
     * 
     */
    delete<T extends CollectionItemDeleteArgs>(args: SelectSubset<T, CollectionItemDeleteArgs<ExtArgs>>): Prisma__CollectionItemClient<$Result.GetResult<Prisma.$CollectionItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CollectionItem.
     * @param {CollectionItemUpdateArgs} args - Arguments to update one CollectionItem.
     * @example
     * // Update one CollectionItem
     * const collectionItem = await prisma.collectionItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CollectionItemUpdateArgs>(args: SelectSubset<T, CollectionItemUpdateArgs<ExtArgs>>): Prisma__CollectionItemClient<$Result.GetResult<Prisma.$CollectionItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CollectionItems.
     * @param {CollectionItemDeleteManyArgs} args - Arguments to filter CollectionItems to delete.
     * @example
     * // Delete a few CollectionItems
     * const { count } = await prisma.collectionItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CollectionItemDeleteManyArgs>(args?: SelectSubset<T, CollectionItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CollectionItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CollectionItems
     * const collectionItem = await prisma.collectionItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CollectionItemUpdateManyArgs>(args: SelectSubset<T, CollectionItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CollectionItem.
     * @param {CollectionItemUpsertArgs} args - Arguments to update or create a CollectionItem.
     * @example
     * // Update or create a CollectionItem
     * const collectionItem = await prisma.collectionItem.upsert({
     *   create: {
     *     // ... data to create a CollectionItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CollectionItem we want to update
     *   }
     * })
     */
    upsert<T extends CollectionItemUpsertArgs>(args: SelectSubset<T, CollectionItemUpsertArgs<ExtArgs>>): Prisma__CollectionItemClient<$Result.GetResult<Prisma.$CollectionItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CollectionItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionItemCountArgs} args - Arguments to filter CollectionItems to count.
     * @example
     * // Count the number of CollectionItems
     * const count = await prisma.collectionItem.count({
     *   where: {
     *     // ... the filter for the CollectionItems we want to count
     *   }
     * })
    **/
    count<T extends CollectionItemCountArgs>(
      args?: Subset<T, CollectionItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollectionItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CollectionItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollectionItemAggregateArgs>(args: Subset<T, CollectionItemAggregateArgs>): Prisma.PrismaPromise<GetCollectionItemAggregateType<T>>

    /**
     * Group by CollectionItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollectionItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollectionItemGroupByArgs['orderBy'] }
        : { orderBy?: CollectionItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollectionItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollectionItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CollectionItem model
   */
  readonly fields: CollectionItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CollectionItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CollectionItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    collection<T extends CollectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CollectionDefaultArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    fragrance<T extends FragranceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FragranceDefaultArgs<ExtArgs>>): Prisma__FragranceClient<$Result.GetResult<Prisma.$FragrancePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CollectionItem model
   */ 
  interface CollectionItemFieldRefs {
    readonly id: FieldRef<"CollectionItem", 'String'>
    readonly collectionId: FieldRef<"CollectionItem", 'String'>
    readonly fragranceId: FieldRef<"CollectionItem", 'String'>
    readonly personalRating: FieldRef<"CollectionItem", 'Int'>
    readonly personalNotes: FieldRef<"CollectionItem", 'String'>
    readonly purchaseDate: FieldRef<"CollectionItem", 'DateTime'>
    readonly bottleSize: FieldRef<"CollectionItem", 'String'>
    readonly createdAt: FieldRef<"CollectionItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CollectionItem findUnique
   */
  export type CollectionItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionItem
     */
    select?: CollectionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionItemInclude<ExtArgs> | null
    /**
     * Filter, which CollectionItem to fetch.
     */
    where: CollectionItemWhereUniqueInput
  }

  /**
   * CollectionItem findUniqueOrThrow
   */
  export type CollectionItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionItem
     */
    select?: CollectionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionItemInclude<ExtArgs> | null
    /**
     * Filter, which CollectionItem to fetch.
     */
    where: CollectionItemWhereUniqueInput
  }

  /**
   * CollectionItem findFirst
   */
  export type CollectionItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionItem
     */
    select?: CollectionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionItemInclude<ExtArgs> | null
    /**
     * Filter, which CollectionItem to fetch.
     */
    where?: CollectionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionItems to fetch.
     */
    orderBy?: CollectionItemOrderByWithRelationInput | CollectionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollectionItems.
     */
    cursor?: CollectionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollectionItems.
     */
    distinct?: CollectionItemScalarFieldEnum | CollectionItemScalarFieldEnum[]
  }

  /**
   * CollectionItem findFirstOrThrow
   */
  export type CollectionItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionItem
     */
    select?: CollectionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionItemInclude<ExtArgs> | null
    /**
     * Filter, which CollectionItem to fetch.
     */
    where?: CollectionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionItems to fetch.
     */
    orderBy?: CollectionItemOrderByWithRelationInput | CollectionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollectionItems.
     */
    cursor?: CollectionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollectionItems.
     */
    distinct?: CollectionItemScalarFieldEnum | CollectionItemScalarFieldEnum[]
  }

  /**
   * CollectionItem findMany
   */
  export type CollectionItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionItem
     */
    select?: CollectionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionItemInclude<ExtArgs> | null
    /**
     * Filter, which CollectionItems to fetch.
     */
    where?: CollectionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionItems to fetch.
     */
    orderBy?: CollectionItemOrderByWithRelationInput | CollectionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CollectionItems.
     */
    cursor?: CollectionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionItems.
     */
    skip?: number
    distinct?: CollectionItemScalarFieldEnum | CollectionItemScalarFieldEnum[]
  }

  /**
   * CollectionItem create
   */
  export type CollectionItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionItem
     */
    select?: CollectionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionItemInclude<ExtArgs> | null
    /**
     * The data needed to create a CollectionItem.
     */
    data: XOR<CollectionItemCreateInput, CollectionItemUncheckedCreateInput>
  }

  /**
   * CollectionItem createMany
   */
  export type CollectionItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CollectionItems.
     */
    data: CollectionItemCreateManyInput | CollectionItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CollectionItem createManyAndReturn
   */
  export type CollectionItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionItem
     */
    select?: CollectionItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CollectionItems.
     */
    data: CollectionItemCreateManyInput | CollectionItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CollectionItem update
   */
  export type CollectionItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionItem
     */
    select?: CollectionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionItemInclude<ExtArgs> | null
    /**
     * The data needed to update a CollectionItem.
     */
    data: XOR<CollectionItemUpdateInput, CollectionItemUncheckedUpdateInput>
    /**
     * Choose, which CollectionItem to update.
     */
    where: CollectionItemWhereUniqueInput
  }

  /**
   * CollectionItem updateMany
   */
  export type CollectionItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CollectionItems.
     */
    data: XOR<CollectionItemUpdateManyMutationInput, CollectionItemUncheckedUpdateManyInput>
    /**
     * Filter which CollectionItems to update
     */
    where?: CollectionItemWhereInput
  }

  /**
   * CollectionItem upsert
   */
  export type CollectionItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionItem
     */
    select?: CollectionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionItemInclude<ExtArgs> | null
    /**
     * The filter to search for the CollectionItem to update in case it exists.
     */
    where: CollectionItemWhereUniqueInput
    /**
     * In case the CollectionItem found by the `where` argument doesn't exist, create a new CollectionItem with this data.
     */
    create: XOR<CollectionItemCreateInput, CollectionItemUncheckedCreateInput>
    /**
     * In case the CollectionItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CollectionItemUpdateInput, CollectionItemUncheckedUpdateInput>
  }

  /**
   * CollectionItem delete
   */
  export type CollectionItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionItem
     */
    select?: CollectionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionItemInclude<ExtArgs> | null
    /**
     * Filter which CollectionItem to delete.
     */
    where: CollectionItemWhereUniqueInput
  }

  /**
   * CollectionItem deleteMany
   */
  export type CollectionItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollectionItems to delete
     */
    where?: CollectionItemWhereInput
  }

  /**
   * CollectionItem without action
   */
  export type CollectionItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionItem
     */
    select?: CollectionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionItemInclude<ExtArgs> | null
  }


  /**
   * Model Battle
   */

  export type AggregateBattle = {
    _count: BattleCountAggregateOutputType | null
    _min: BattleMinAggregateOutputType | null
    _max: BattleMaxAggregateOutputType | null
  }

  export type BattleMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    description: string | null
    status: $Enums.BattleStatus | null
    createdAt: Date | null
    completedAt: Date | null
  }

  export type BattleMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    description: string | null
    status: $Enums.BattleStatus | null
    createdAt: Date | null
    completedAt: Date | null
  }

  export type BattleCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    description: number
    status: number
    createdAt: number
    completedAt: number
    _all: number
  }


  export type BattleMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    status?: true
    createdAt?: true
    completedAt?: true
  }

  export type BattleMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    status?: true
    createdAt?: true
    completedAt?: true
  }

  export type BattleCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    status?: true
    createdAt?: true
    completedAt?: true
    _all?: true
  }

  export type BattleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Battle to aggregate.
     */
    where?: BattleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Battles to fetch.
     */
    orderBy?: BattleOrderByWithRelationInput | BattleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BattleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Battles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Battles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Battles
    **/
    _count?: true | BattleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BattleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BattleMaxAggregateInputType
  }

  export type GetBattleAggregateType<T extends BattleAggregateArgs> = {
        [P in keyof T & keyof AggregateBattle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBattle[P]>
      : GetScalarType<T[P], AggregateBattle[P]>
  }




  export type BattleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BattleWhereInput
    orderBy?: BattleOrderByWithAggregationInput | BattleOrderByWithAggregationInput[]
    by: BattleScalarFieldEnum[] | BattleScalarFieldEnum
    having?: BattleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BattleCountAggregateInputType | true
    _min?: BattleMinAggregateInputType
    _max?: BattleMaxAggregateInputType
  }

  export type BattleGroupByOutputType = {
    id: string
    userId: string
    title: string
    description: string | null
    status: $Enums.BattleStatus
    createdAt: Date
    completedAt: Date | null
    _count: BattleCountAggregateOutputType | null
    _min: BattleMinAggregateOutputType | null
    _max: BattleMaxAggregateOutputType | null
  }

  type GetBattleGroupByPayload<T extends BattleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BattleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BattleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BattleGroupByOutputType[P]>
            : GetScalarType<T[P], BattleGroupByOutputType[P]>
        }
      >
    >


  export type BattleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    completedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | Battle$itemsArgs<ExtArgs>
    _count?: boolean | BattleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["battle"]>

  export type BattleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    completedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["battle"]>

  export type BattleSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    completedAt?: boolean
  }

  export type BattleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | Battle$itemsArgs<ExtArgs>
    _count?: boolean | BattleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BattleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BattlePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Battle"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      items: Prisma.$BattleItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      title: string
      description: string | null
      status: $Enums.BattleStatus
      createdAt: Date
      completedAt: Date | null
    }, ExtArgs["result"]["battle"]>
    composites: {}
  }

  type BattleGetPayload<S extends boolean | null | undefined | BattleDefaultArgs> = $Result.GetResult<Prisma.$BattlePayload, S>

  type BattleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BattleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BattleCountAggregateInputType | true
    }

  export interface BattleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Battle'], meta: { name: 'Battle' } }
    /**
     * Find zero or one Battle that matches the filter.
     * @param {BattleFindUniqueArgs} args - Arguments to find a Battle
     * @example
     * // Get one Battle
     * const battle = await prisma.battle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BattleFindUniqueArgs>(args: SelectSubset<T, BattleFindUniqueArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Battle that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BattleFindUniqueOrThrowArgs} args - Arguments to find a Battle
     * @example
     * // Get one Battle
     * const battle = await prisma.battle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BattleFindUniqueOrThrowArgs>(args: SelectSubset<T, BattleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Battle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleFindFirstArgs} args - Arguments to find a Battle
     * @example
     * // Get one Battle
     * const battle = await prisma.battle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BattleFindFirstArgs>(args?: SelectSubset<T, BattleFindFirstArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Battle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleFindFirstOrThrowArgs} args - Arguments to find a Battle
     * @example
     * // Get one Battle
     * const battle = await prisma.battle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BattleFindFirstOrThrowArgs>(args?: SelectSubset<T, BattleFindFirstOrThrowArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Battles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Battles
     * const battles = await prisma.battle.findMany()
     * 
     * // Get first 10 Battles
     * const battles = await prisma.battle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const battleWithIdOnly = await prisma.battle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BattleFindManyArgs>(args?: SelectSubset<T, BattleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Battle.
     * @param {BattleCreateArgs} args - Arguments to create a Battle.
     * @example
     * // Create one Battle
     * const Battle = await prisma.battle.create({
     *   data: {
     *     // ... data to create a Battle
     *   }
     * })
     * 
     */
    create<T extends BattleCreateArgs>(args: SelectSubset<T, BattleCreateArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Battles.
     * @param {BattleCreateManyArgs} args - Arguments to create many Battles.
     * @example
     * // Create many Battles
     * const battle = await prisma.battle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BattleCreateManyArgs>(args?: SelectSubset<T, BattleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Battles and returns the data saved in the database.
     * @param {BattleCreateManyAndReturnArgs} args - Arguments to create many Battles.
     * @example
     * // Create many Battles
     * const battle = await prisma.battle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Battles and only return the `id`
     * const battleWithIdOnly = await prisma.battle.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BattleCreateManyAndReturnArgs>(args?: SelectSubset<T, BattleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Battle.
     * @param {BattleDeleteArgs} args - Arguments to delete one Battle.
     * @example
     * // Delete one Battle
     * const Battle = await prisma.battle.delete({
     *   where: {
     *     // ... filter to delete one Battle
     *   }
     * })
     * 
     */
    delete<T extends BattleDeleteArgs>(args: SelectSubset<T, BattleDeleteArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Battle.
     * @param {BattleUpdateArgs} args - Arguments to update one Battle.
     * @example
     * // Update one Battle
     * const battle = await prisma.battle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BattleUpdateArgs>(args: SelectSubset<T, BattleUpdateArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Battles.
     * @param {BattleDeleteManyArgs} args - Arguments to filter Battles to delete.
     * @example
     * // Delete a few Battles
     * const { count } = await prisma.battle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BattleDeleteManyArgs>(args?: SelectSubset<T, BattleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Battles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Battles
     * const battle = await prisma.battle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BattleUpdateManyArgs>(args: SelectSubset<T, BattleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Battle.
     * @param {BattleUpsertArgs} args - Arguments to update or create a Battle.
     * @example
     * // Update or create a Battle
     * const battle = await prisma.battle.upsert({
     *   create: {
     *     // ... data to create a Battle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Battle we want to update
     *   }
     * })
     */
    upsert<T extends BattleUpsertArgs>(args: SelectSubset<T, BattleUpsertArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Battles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleCountArgs} args - Arguments to filter Battles to count.
     * @example
     * // Count the number of Battles
     * const count = await prisma.battle.count({
     *   where: {
     *     // ... the filter for the Battles we want to count
     *   }
     * })
    **/
    count<T extends BattleCountArgs>(
      args?: Subset<T, BattleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BattleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Battle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BattleAggregateArgs>(args: Subset<T, BattleAggregateArgs>): Prisma.PrismaPromise<GetBattleAggregateType<T>>

    /**
     * Group by Battle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BattleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BattleGroupByArgs['orderBy'] }
        : { orderBy?: BattleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BattleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBattleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Battle model
   */
  readonly fields: BattleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Battle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BattleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    items<T extends Battle$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Battle$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattleItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Battle model
   */ 
  interface BattleFieldRefs {
    readonly id: FieldRef<"Battle", 'String'>
    readonly userId: FieldRef<"Battle", 'String'>
    readonly title: FieldRef<"Battle", 'String'>
    readonly description: FieldRef<"Battle", 'String'>
    readonly status: FieldRef<"Battle", 'BattleStatus'>
    readonly createdAt: FieldRef<"Battle", 'DateTime'>
    readonly completedAt: FieldRef<"Battle", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Battle findUnique
   */
  export type BattleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * Filter, which Battle to fetch.
     */
    where: BattleWhereUniqueInput
  }

  /**
   * Battle findUniqueOrThrow
   */
  export type BattleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * Filter, which Battle to fetch.
     */
    where: BattleWhereUniqueInput
  }

  /**
   * Battle findFirst
   */
  export type BattleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * Filter, which Battle to fetch.
     */
    where?: BattleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Battles to fetch.
     */
    orderBy?: BattleOrderByWithRelationInput | BattleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Battles.
     */
    cursor?: BattleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Battles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Battles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Battles.
     */
    distinct?: BattleScalarFieldEnum | BattleScalarFieldEnum[]
  }

  /**
   * Battle findFirstOrThrow
   */
  export type BattleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * Filter, which Battle to fetch.
     */
    where?: BattleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Battles to fetch.
     */
    orderBy?: BattleOrderByWithRelationInput | BattleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Battles.
     */
    cursor?: BattleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Battles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Battles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Battles.
     */
    distinct?: BattleScalarFieldEnum | BattleScalarFieldEnum[]
  }

  /**
   * Battle findMany
   */
  export type BattleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * Filter, which Battles to fetch.
     */
    where?: BattleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Battles to fetch.
     */
    orderBy?: BattleOrderByWithRelationInput | BattleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Battles.
     */
    cursor?: BattleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Battles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Battles.
     */
    skip?: number
    distinct?: BattleScalarFieldEnum | BattleScalarFieldEnum[]
  }

  /**
   * Battle create
   */
  export type BattleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * The data needed to create a Battle.
     */
    data: XOR<BattleCreateInput, BattleUncheckedCreateInput>
  }

  /**
   * Battle createMany
   */
  export type BattleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Battles.
     */
    data: BattleCreateManyInput | BattleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Battle createManyAndReturn
   */
  export type BattleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Battles.
     */
    data: BattleCreateManyInput | BattleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Battle update
   */
  export type BattleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * The data needed to update a Battle.
     */
    data: XOR<BattleUpdateInput, BattleUncheckedUpdateInput>
    /**
     * Choose, which Battle to update.
     */
    where: BattleWhereUniqueInput
  }

  /**
   * Battle updateMany
   */
  export type BattleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Battles.
     */
    data: XOR<BattleUpdateManyMutationInput, BattleUncheckedUpdateManyInput>
    /**
     * Filter which Battles to update
     */
    where?: BattleWhereInput
  }

  /**
   * Battle upsert
   */
  export type BattleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * The filter to search for the Battle to update in case it exists.
     */
    where: BattleWhereUniqueInput
    /**
     * In case the Battle found by the `where` argument doesn't exist, create a new Battle with this data.
     */
    create: XOR<BattleCreateInput, BattleUncheckedCreateInput>
    /**
     * In case the Battle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BattleUpdateInput, BattleUncheckedUpdateInput>
  }

  /**
   * Battle delete
   */
  export type BattleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * Filter which Battle to delete.
     */
    where: BattleWhereUniqueInput
  }

  /**
   * Battle deleteMany
   */
  export type BattleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Battles to delete
     */
    where?: BattleWhereInput
  }

  /**
   * Battle.items
   */
  export type Battle$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleItem
     */
    select?: BattleItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleItemInclude<ExtArgs> | null
    where?: BattleItemWhereInput
    orderBy?: BattleItemOrderByWithRelationInput | BattleItemOrderByWithRelationInput[]
    cursor?: BattleItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BattleItemScalarFieldEnum | BattleItemScalarFieldEnum[]
  }

  /**
   * Battle without action
   */
  export type BattleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
  }


  /**
   * Model BattleItem
   */

  export type AggregateBattleItem = {
    _count: BattleItemCountAggregateOutputType | null
    _avg: BattleItemAvgAggregateOutputType | null
    _sum: BattleItemSumAggregateOutputType | null
    _min: BattleItemMinAggregateOutputType | null
    _max: BattleItemMaxAggregateOutputType | null
  }

  export type BattleItemAvgAggregateOutputType = {
    position: number | null
    votes: number | null
  }

  export type BattleItemSumAggregateOutputType = {
    position: number | null
    votes: number | null
  }

  export type BattleItemMinAggregateOutputType = {
    id: string | null
    battleId: string | null
    fragranceId: string | null
    position: number | null
    votes: number | null
    winner: boolean | null
  }

  export type BattleItemMaxAggregateOutputType = {
    id: string | null
    battleId: string | null
    fragranceId: string | null
    position: number | null
    votes: number | null
    winner: boolean | null
  }

  export type BattleItemCountAggregateOutputType = {
    id: number
    battleId: number
    fragranceId: number
    position: number
    votes: number
    winner: number
    _all: number
  }


  export type BattleItemAvgAggregateInputType = {
    position?: true
    votes?: true
  }

  export type BattleItemSumAggregateInputType = {
    position?: true
    votes?: true
  }

  export type BattleItemMinAggregateInputType = {
    id?: true
    battleId?: true
    fragranceId?: true
    position?: true
    votes?: true
    winner?: true
  }

  export type BattleItemMaxAggregateInputType = {
    id?: true
    battleId?: true
    fragranceId?: true
    position?: true
    votes?: true
    winner?: true
  }

  export type BattleItemCountAggregateInputType = {
    id?: true
    battleId?: true
    fragranceId?: true
    position?: true
    votes?: true
    winner?: true
    _all?: true
  }

  export type BattleItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BattleItem to aggregate.
     */
    where?: BattleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BattleItems to fetch.
     */
    orderBy?: BattleItemOrderByWithRelationInput | BattleItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BattleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BattleItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BattleItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BattleItems
    **/
    _count?: true | BattleItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BattleItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BattleItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BattleItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BattleItemMaxAggregateInputType
  }

  export type GetBattleItemAggregateType<T extends BattleItemAggregateArgs> = {
        [P in keyof T & keyof AggregateBattleItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBattleItem[P]>
      : GetScalarType<T[P], AggregateBattleItem[P]>
  }




  export type BattleItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BattleItemWhereInput
    orderBy?: BattleItemOrderByWithAggregationInput | BattleItemOrderByWithAggregationInput[]
    by: BattleItemScalarFieldEnum[] | BattleItemScalarFieldEnum
    having?: BattleItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BattleItemCountAggregateInputType | true
    _avg?: BattleItemAvgAggregateInputType
    _sum?: BattleItemSumAggregateInputType
    _min?: BattleItemMinAggregateInputType
    _max?: BattleItemMaxAggregateInputType
  }

  export type BattleItemGroupByOutputType = {
    id: string
    battleId: string
    fragranceId: string
    position: number
    votes: number
    winner: boolean
    _count: BattleItemCountAggregateOutputType | null
    _avg: BattleItemAvgAggregateOutputType | null
    _sum: BattleItemSumAggregateOutputType | null
    _min: BattleItemMinAggregateOutputType | null
    _max: BattleItemMaxAggregateOutputType | null
  }

  type GetBattleItemGroupByPayload<T extends BattleItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BattleItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BattleItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BattleItemGroupByOutputType[P]>
            : GetScalarType<T[P], BattleItemGroupByOutputType[P]>
        }
      >
    >


  export type BattleItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    battleId?: boolean
    fragranceId?: boolean
    position?: boolean
    votes?: boolean
    winner?: boolean
    battle?: boolean | BattleDefaultArgs<ExtArgs>
    fragrance?: boolean | FragranceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["battleItem"]>

  export type BattleItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    battleId?: boolean
    fragranceId?: boolean
    position?: boolean
    votes?: boolean
    winner?: boolean
    battle?: boolean | BattleDefaultArgs<ExtArgs>
    fragrance?: boolean | FragranceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["battleItem"]>

  export type BattleItemSelectScalar = {
    id?: boolean
    battleId?: boolean
    fragranceId?: boolean
    position?: boolean
    votes?: boolean
    winner?: boolean
  }

  export type BattleItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    battle?: boolean | BattleDefaultArgs<ExtArgs>
    fragrance?: boolean | FragranceDefaultArgs<ExtArgs>
  }
  export type BattleItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    battle?: boolean | BattleDefaultArgs<ExtArgs>
    fragrance?: boolean | FragranceDefaultArgs<ExtArgs>
  }

  export type $BattleItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BattleItem"
    objects: {
      battle: Prisma.$BattlePayload<ExtArgs>
      fragrance: Prisma.$FragrancePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      battleId: string
      fragranceId: string
      position: number
      votes: number
      winner: boolean
    }, ExtArgs["result"]["battleItem"]>
    composites: {}
  }

  type BattleItemGetPayload<S extends boolean | null | undefined | BattleItemDefaultArgs> = $Result.GetResult<Prisma.$BattleItemPayload, S>

  type BattleItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BattleItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BattleItemCountAggregateInputType | true
    }

  export interface BattleItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BattleItem'], meta: { name: 'BattleItem' } }
    /**
     * Find zero or one BattleItem that matches the filter.
     * @param {BattleItemFindUniqueArgs} args - Arguments to find a BattleItem
     * @example
     * // Get one BattleItem
     * const battleItem = await prisma.battleItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BattleItemFindUniqueArgs>(args: SelectSubset<T, BattleItemFindUniqueArgs<ExtArgs>>): Prisma__BattleItemClient<$Result.GetResult<Prisma.$BattleItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BattleItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BattleItemFindUniqueOrThrowArgs} args - Arguments to find a BattleItem
     * @example
     * // Get one BattleItem
     * const battleItem = await prisma.battleItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BattleItemFindUniqueOrThrowArgs>(args: SelectSubset<T, BattleItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BattleItemClient<$Result.GetResult<Prisma.$BattleItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BattleItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleItemFindFirstArgs} args - Arguments to find a BattleItem
     * @example
     * // Get one BattleItem
     * const battleItem = await prisma.battleItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BattleItemFindFirstArgs>(args?: SelectSubset<T, BattleItemFindFirstArgs<ExtArgs>>): Prisma__BattleItemClient<$Result.GetResult<Prisma.$BattleItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BattleItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleItemFindFirstOrThrowArgs} args - Arguments to find a BattleItem
     * @example
     * // Get one BattleItem
     * const battleItem = await prisma.battleItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BattleItemFindFirstOrThrowArgs>(args?: SelectSubset<T, BattleItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__BattleItemClient<$Result.GetResult<Prisma.$BattleItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BattleItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BattleItems
     * const battleItems = await prisma.battleItem.findMany()
     * 
     * // Get first 10 BattleItems
     * const battleItems = await prisma.battleItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const battleItemWithIdOnly = await prisma.battleItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BattleItemFindManyArgs>(args?: SelectSubset<T, BattleItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattleItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BattleItem.
     * @param {BattleItemCreateArgs} args - Arguments to create a BattleItem.
     * @example
     * // Create one BattleItem
     * const BattleItem = await prisma.battleItem.create({
     *   data: {
     *     // ... data to create a BattleItem
     *   }
     * })
     * 
     */
    create<T extends BattleItemCreateArgs>(args: SelectSubset<T, BattleItemCreateArgs<ExtArgs>>): Prisma__BattleItemClient<$Result.GetResult<Prisma.$BattleItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BattleItems.
     * @param {BattleItemCreateManyArgs} args - Arguments to create many BattleItems.
     * @example
     * // Create many BattleItems
     * const battleItem = await prisma.battleItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BattleItemCreateManyArgs>(args?: SelectSubset<T, BattleItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BattleItems and returns the data saved in the database.
     * @param {BattleItemCreateManyAndReturnArgs} args - Arguments to create many BattleItems.
     * @example
     * // Create many BattleItems
     * const battleItem = await prisma.battleItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BattleItems and only return the `id`
     * const battleItemWithIdOnly = await prisma.battleItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BattleItemCreateManyAndReturnArgs>(args?: SelectSubset<T, BattleItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattleItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BattleItem.
     * @param {BattleItemDeleteArgs} args - Arguments to delete one BattleItem.
     * @example
     * // Delete one BattleItem
     * const BattleItem = await prisma.battleItem.delete({
     *   where: {
     *     // ... filter to delete one BattleItem
     *   }
     * })
     * 
     */
    delete<T extends BattleItemDeleteArgs>(args: SelectSubset<T, BattleItemDeleteArgs<ExtArgs>>): Prisma__BattleItemClient<$Result.GetResult<Prisma.$BattleItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BattleItem.
     * @param {BattleItemUpdateArgs} args - Arguments to update one BattleItem.
     * @example
     * // Update one BattleItem
     * const battleItem = await prisma.battleItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BattleItemUpdateArgs>(args: SelectSubset<T, BattleItemUpdateArgs<ExtArgs>>): Prisma__BattleItemClient<$Result.GetResult<Prisma.$BattleItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BattleItems.
     * @param {BattleItemDeleteManyArgs} args - Arguments to filter BattleItems to delete.
     * @example
     * // Delete a few BattleItems
     * const { count } = await prisma.battleItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BattleItemDeleteManyArgs>(args?: SelectSubset<T, BattleItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BattleItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BattleItems
     * const battleItem = await prisma.battleItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BattleItemUpdateManyArgs>(args: SelectSubset<T, BattleItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BattleItem.
     * @param {BattleItemUpsertArgs} args - Arguments to update or create a BattleItem.
     * @example
     * // Update or create a BattleItem
     * const battleItem = await prisma.battleItem.upsert({
     *   create: {
     *     // ... data to create a BattleItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BattleItem we want to update
     *   }
     * })
     */
    upsert<T extends BattleItemUpsertArgs>(args: SelectSubset<T, BattleItemUpsertArgs<ExtArgs>>): Prisma__BattleItemClient<$Result.GetResult<Prisma.$BattleItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BattleItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleItemCountArgs} args - Arguments to filter BattleItems to count.
     * @example
     * // Count the number of BattleItems
     * const count = await prisma.battleItem.count({
     *   where: {
     *     // ... the filter for the BattleItems we want to count
     *   }
     * })
    **/
    count<T extends BattleItemCountArgs>(
      args?: Subset<T, BattleItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BattleItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BattleItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BattleItemAggregateArgs>(args: Subset<T, BattleItemAggregateArgs>): Prisma.PrismaPromise<GetBattleItemAggregateType<T>>

    /**
     * Group by BattleItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BattleItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BattleItemGroupByArgs['orderBy'] }
        : { orderBy?: BattleItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BattleItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBattleItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BattleItem model
   */
  readonly fields: BattleItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BattleItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BattleItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    battle<T extends BattleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BattleDefaultArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    fragrance<T extends FragranceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FragranceDefaultArgs<ExtArgs>>): Prisma__FragranceClient<$Result.GetResult<Prisma.$FragrancePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BattleItem model
   */ 
  interface BattleItemFieldRefs {
    readonly id: FieldRef<"BattleItem", 'String'>
    readonly battleId: FieldRef<"BattleItem", 'String'>
    readonly fragranceId: FieldRef<"BattleItem", 'String'>
    readonly position: FieldRef<"BattleItem", 'Int'>
    readonly votes: FieldRef<"BattleItem", 'Int'>
    readonly winner: FieldRef<"BattleItem", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * BattleItem findUnique
   */
  export type BattleItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleItem
     */
    select?: BattleItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleItemInclude<ExtArgs> | null
    /**
     * Filter, which BattleItem to fetch.
     */
    where: BattleItemWhereUniqueInput
  }

  /**
   * BattleItem findUniqueOrThrow
   */
  export type BattleItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleItem
     */
    select?: BattleItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleItemInclude<ExtArgs> | null
    /**
     * Filter, which BattleItem to fetch.
     */
    where: BattleItemWhereUniqueInput
  }

  /**
   * BattleItem findFirst
   */
  export type BattleItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleItem
     */
    select?: BattleItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleItemInclude<ExtArgs> | null
    /**
     * Filter, which BattleItem to fetch.
     */
    where?: BattleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BattleItems to fetch.
     */
    orderBy?: BattleItemOrderByWithRelationInput | BattleItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BattleItems.
     */
    cursor?: BattleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BattleItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BattleItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BattleItems.
     */
    distinct?: BattleItemScalarFieldEnum | BattleItemScalarFieldEnum[]
  }

  /**
   * BattleItem findFirstOrThrow
   */
  export type BattleItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleItem
     */
    select?: BattleItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleItemInclude<ExtArgs> | null
    /**
     * Filter, which BattleItem to fetch.
     */
    where?: BattleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BattleItems to fetch.
     */
    orderBy?: BattleItemOrderByWithRelationInput | BattleItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BattleItems.
     */
    cursor?: BattleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BattleItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BattleItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BattleItems.
     */
    distinct?: BattleItemScalarFieldEnum | BattleItemScalarFieldEnum[]
  }

  /**
   * BattleItem findMany
   */
  export type BattleItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleItem
     */
    select?: BattleItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleItemInclude<ExtArgs> | null
    /**
     * Filter, which BattleItems to fetch.
     */
    where?: BattleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BattleItems to fetch.
     */
    orderBy?: BattleItemOrderByWithRelationInput | BattleItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BattleItems.
     */
    cursor?: BattleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BattleItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BattleItems.
     */
    skip?: number
    distinct?: BattleItemScalarFieldEnum | BattleItemScalarFieldEnum[]
  }

  /**
   * BattleItem create
   */
  export type BattleItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleItem
     */
    select?: BattleItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleItemInclude<ExtArgs> | null
    /**
     * The data needed to create a BattleItem.
     */
    data: XOR<BattleItemCreateInput, BattleItemUncheckedCreateInput>
  }

  /**
   * BattleItem createMany
   */
  export type BattleItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BattleItems.
     */
    data: BattleItemCreateManyInput | BattleItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BattleItem createManyAndReturn
   */
  export type BattleItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleItem
     */
    select?: BattleItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BattleItems.
     */
    data: BattleItemCreateManyInput | BattleItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BattleItem update
   */
  export type BattleItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleItem
     */
    select?: BattleItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleItemInclude<ExtArgs> | null
    /**
     * The data needed to update a BattleItem.
     */
    data: XOR<BattleItemUpdateInput, BattleItemUncheckedUpdateInput>
    /**
     * Choose, which BattleItem to update.
     */
    where: BattleItemWhereUniqueInput
  }

  /**
   * BattleItem updateMany
   */
  export type BattleItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BattleItems.
     */
    data: XOR<BattleItemUpdateManyMutationInput, BattleItemUncheckedUpdateManyInput>
    /**
     * Filter which BattleItems to update
     */
    where?: BattleItemWhereInput
  }

  /**
   * BattleItem upsert
   */
  export type BattleItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleItem
     */
    select?: BattleItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleItemInclude<ExtArgs> | null
    /**
     * The filter to search for the BattleItem to update in case it exists.
     */
    where: BattleItemWhereUniqueInput
    /**
     * In case the BattleItem found by the `where` argument doesn't exist, create a new BattleItem with this data.
     */
    create: XOR<BattleItemCreateInput, BattleItemUncheckedCreateInput>
    /**
     * In case the BattleItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BattleItemUpdateInput, BattleItemUncheckedUpdateInput>
  }

  /**
   * BattleItem delete
   */
  export type BattleItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleItem
     */
    select?: BattleItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleItemInclude<ExtArgs> | null
    /**
     * Filter which BattleItem to delete.
     */
    where: BattleItemWhereUniqueInput
  }

  /**
   * BattleItem deleteMany
   */
  export type BattleItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BattleItems to delete
     */
    where?: BattleItemWhereInput
  }

  /**
   * BattleItem without action
   */
  export type BattleItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleItem
     */
    select?: BattleItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleItemInclude<ExtArgs> | null
  }


  /**
   * Model AICategorFeedback
   */

  export type AggregateAICategorFeedback = {
    _count: AICategorFeedbackCountAggregateOutputType | null
    _min: AICategorFeedbackMinAggregateOutputType | null
    _max: AICategorFeedbackMaxAggregateOutputType | null
  }

  export type AICategorFeedbackMinAggregateOutputType = {
    id: string | null
    userId: string | null
    fragranceId: string | null
    feedbackType: string | null
    createdAt: Date | null
  }

  export type AICategorFeedbackMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    fragranceId: string | null
    feedbackType: string | null
    createdAt: Date | null
  }

  export type AICategorFeedbackCountAggregateOutputType = {
    id: number
    userId: number
    fragranceId: number
    aiSuggestion: number
    userCorrection: number
    feedbackType: number
    createdAt: number
    _all: number
  }


  export type AICategorFeedbackMinAggregateInputType = {
    id?: true
    userId?: true
    fragranceId?: true
    feedbackType?: true
    createdAt?: true
  }

  export type AICategorFeedbackMaxAggregateInputType = {
    id?: true
    userId?: true
    fragranceId?: true
    feedbackType?: true
    createdAt?: true
  }

  export type AICategorFeedbackCountAggregateInputType = {
    id?: true
    userId?: true
    fragranceId?: true
    aiSuggestion?: true
    userCorrection?: true
    feedbackType?: true
    createdAt?: true
    _all?: true
  }

  export type AICategorFeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AICategorFeedback to aggregate.
     */
    where?: AICategorFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AICategorFeedbacks to fetch.
     */
    orderBy?: AICategorFeedbackOrderByWithRelationInput | AICategorFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AICategorFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AICategorFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AICategorFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AICategorFeedbacks
    **/
    _count?: true | AICategorFeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AICategorFeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AICategorFeedbackMaxAggregateInputType
  }

  export type GetAICategorFeedbackAggregateType<T extends AICategorFeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateAICategorFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAICategorFeedback[P]>
      : GetScalarType<T[P], AggregateAICategorFeedback[P]>
  }




  export type AICategorFeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AICategorFeedbackWhereInput
    orderBy?: AICategorFeedbackOrderByWithAggregationInput | AICategorFeedbackOrderByWithAggregationInput[]
    by: AICategorFeedbackScalarFieldEnum[] | AICategorFeedbackScalarFieldEnum
    having?: AICategorFeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AICategorFeedbackCountAggregateInputType | true
    _min?: AICategorFeedbackMinAggregateInputType
    _max?: AICategorFeedbackMaxAggregateInputType
  }

  export type AICategorFeedbackGroupByOutputType = {
    id: string
    userId: string
    fragranceId: string
    aiSuggestion: JsonValue
    userCorrection: JsonValue
    feedbackType: string
    createdAt: Date
    _count: AICategorFeedbackCountAggregateOutputType | null
    _min: AICategorFeedbackMinAggregateOutputType | null
    _max: AICategorFeedbackMaxAggregateOutputType | null
  }

  type GetAICategorFeedbackGroupByPayload<T extends AICategorFeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AICategorFeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AICategorFeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AICategorFeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], AICategorFeedbackGroupByOutputType[P]>
        }
      >
    >


  export type AICategorFeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fragranceId?: boolean
    aiSuggestion?: boolean
    userCorrection?: boolean
    feedbackType?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    fragrance?: boolean | FragranceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aICategorFeedback"]>

  export type AICategorFeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fragranceId?: boolean
    aiSuggestion?: boolean
    userCorrection?: boolean
    feedbackType?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    fragrance?: boolean | FragranceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aICategorFeedback"]>

  export type AICategorFeedbackSelectScalar = {
    id?: boolean
    userId?: boolean
    fragranceId?: boolean
    aiSuggestion?: boolean
    userCorrection?: boolean
    feedbackType?: boolean
    createdAt?: boolean
  }

  export type AICategorFeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    fragrance?: boolean | FragranceDefaultArgs<ExtArgs>
  }
  export type AICategorFeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    fragrance?: boolean | FragranceDefaultArgs<ExtArgs>
  }

  export type $AICategorFeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AICategorFeedback"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      fragrance: Prisma.$FragrancePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      fragranceId: string
      aiSuggestion: Prisma.JsonValue
      userCorrection: Prisma.JsonValue
      feedbackType: string
      createdAt: Date
    }, ExtArgs["result"]["aICategorFeedback"]>
    composites: {}
  }

  type AICategorFeedbackGetPayload<S extends boolean | null | undefined | AICategorFeedbackDefaultArgs> = $Result.GetResult<Prisma.$AICategorFeedbackPayload, S>

  type AICategorFeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AICategorFeedbackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AICategorFeedbackCountAggregateInputType | true
    }

  export interface AICategorFeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AICategorFeedback'], meta: { name: 'AICategorFeedback' } }
    /**
     * Find zero or one AICategorFeedback that matches the filter.
     * @param {AICategorFeedbackFindUniqueArgs} args - Arguments to find a AICategorFeedback
     * @example
     * // Get one AICategorFeedback
     * const aICategorFeedback = await prisma.aICategorFeedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AICategorFeedbackFindUniqueArgs>(args: SelectSubset<T, AICategorFeedbackFindUniqueArgs<ExtArgs>>): Prisma__AICategorFeedbackClient<$Result.GetResult<Prisma.$AICategorFeedbackPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AICategorFeedback that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AICategorFeedbackFindUniqueOrThrowArgs} args - Arguments to find a AICategorFeedback
     * @example
     * // Get one AICategorFeedback
     * const aICategorFeedback = await prisma.aICategorFeedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AICategorFeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, AICategorFeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AICategorFeedbackClient<$Result.GetResult<Prisma.$AICategorFeedbackPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AICategorFeedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AICategorFeedbackFindFirstArgs} args - Arguments to find a AICategorFeedback
     * @example
     * // Get one AICategorFeedback
     * const aICategorFeedback = await prisma.aICategorFeedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AICategorFeedbackFindFirstArgs>(args?: SelectSubset<T, AICategorFeedbackFindFirstArgs<ExtArgs>>): Prisma__AICategorFeedbackClient<$Result.GetResult<Prisma.$AICategorFeedbackPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AICategorFeedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AICategorFeedbackFindFirstOrThrowArgs} args - Arguments to find a AICategorFeedback
     * @example
     * // Get one AICategorFeedback
     * const aICategorFeedback = await prisma.aICategorFeedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AICategorFeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, AICategorFeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__AICategorFeedbackClient<$Result.GetResult<Prisma.$AICategorFeedbackPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AICategorFeedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AICategorFeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AICategorFeedbacks
     * const aICategorFeedbacks = await prisma.aICategorFeedback.findMany()
     * 
     * // Get first 10 AICategorFeedbacks
     * const aICategorFeedbacks = await prisma.aICategorFeedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aICategorFeedbackWithIdOnly = await prisma.aICategorFeedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AICategorFeedbackFindManyArgs>(args?: SelectSubset<T, AICategorFeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AICategorFeedbackPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AICategorFeedback.
     * @param {AICategorFeedbackCreateArgs} args - Arguments to create a AICategorFeedback.
     * @example
     * // Create one AICategorFeedback
     * const AICategorFeedback = await prisma.aICategorFeedback.create({
     *   data: {
     *     // ... data to create a AICategorFeedback
     *   }
     * })
     * 
     */
    create<T extends AICategorFeedbackCreateArgs>(args: SelectSubset<T, AICategorFeedbackCreateArgs<ExtArgs>>): Prisma__AICategorFeedbackClient<$Result.GetResult<Prisma.$AICategorFeedbackPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AICategorFeedbacks.
     * @param {AICategorFeedbackCreateManyArgs} args - Arguments to create many AICategorFeedbacks.
     * @example
     * // Create many AICategorFeedbacks
     * const aICategorFeedback = await prisma.aICategorFeedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AICategorFeedbackCreateManyArgs>(args?: SelectSubset<T, AICategorFeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AICategorFeedbacks and returns the data saved in the database.
     * @param {AICategorFeedbackCreateManyAndReturnArgs} args - Arguments to create many AICategorFeedbacks.
     * @example
     * // Create many AICategorFeedbacks
     * const aICategorFeedback = await prisma.aICategorFeedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AICategorFeedbacks and only return the `id`
     * const aICategorFeedbackWithIdOnly = await prisma.aICategorFeedback.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AICategorFeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, AICategorFeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AICategorFeedbackPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AICategorFeedback.
     * @param {AICategorFeedbackDeleteArgs} args - Arguments to delete one AICategorFeedback.
     * @example
     * // Delete one AICategorFeedback
     * const AICategorFeedback = await prisma.aICategorFeedback.delete({
     *   where: {
     *     // ... filter to delete one AICategorFeedback
     *   }
     * })
     * 
     */
    delete<T extends AICategorFeedbackDeleteArgs>(args: SelectSubset<T, AICategorFeedbackDeleteArgs<ExtArgs>>): Prisma__AICategorFeedbackClient<$Result.GetResult<Prisma.$AICategorFeedbackPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AICategorFeedback.
     * @param {AICategorFeedbackUpdateArgs} args - Arguments to update one AICategorFeedback.
     * @example
     * // Update one AICategorFeedback
     * const aICategorFeedback = await prisma.aICategorFeedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AICategorFeedbackUpdateArgs>(args: SelectSubset<T, AICategorFeedbackUpdateArgs<ExtArgs>>): Prisma__AICategorFeedbackClient<$Result.GetResult<Prisma.$AICategorFeedbackPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AICategorFeedbacks.
     * @param {AICategorFeedbackDeleteManyArgs} args - Arguments to filter AICategorFeedbacks to delete.
     * @example
     * // Delete a few AICategorFeedbacks
     * const { count } = await prisma.aICategorFeedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AICategorFeedbackDeleteManyArgs>(args?: SelectSubset<T, AICategorFeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AICategorFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AICategorFeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AICategorFeedbacks
     * const aICategorFeedback = await prisma.aICategorFeedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AICategorFeedbackUpdateManyArgs>(args: SelectSubset<T, AICategorFeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AICategorFeedback.
     * @param {AICategorFeedbackUpsertArgs} args - Arguments to update or create a AICategorFeedback.
     * @example
     * // Update or create a AICategorFeedback
     * const aICategorFeedback = await prisma.aICategorFeedback.upsert({
     *   create: {
     *     // ... data to create a AICategorFeedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AICategorFeedback we want to update
     *   }
     * })
     */
    upsert<T extends AICategorFeedbackUpsertArgs>(args: SelectSubset<T, AICategorFeedbackUpsertArgs<ExtArgs>>): Prisma__AICategorFeedbackClient<$Result.GetResult<Prisma.$AICategorFeedbackPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AICategorFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AICategorFeedbackCountArgs} args - Arguments to filter AICategorFeedbacks to count.
     * @example
     * // Count the number of AICategorFeedbacks
     * const count = await prisma.aICategorFeedback.count({
     *   where: {
     *     // ... the filter for the AICategorFeedbacks we want to count
     *   }
     * })
    **/
    count<T extends AICategorFeedbackCountArgs>(
      args?: Subset<T, AICategorFeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AICategorFeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AICategorFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AICategorFeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AICategorFeedbackAggregateArgs>(args: Subset<T, AICategorFeedbackAggregateArgs>): Prisma.PrismaPromise<GetAICategorFeedbackAggregateType<T>>

    /**
     * Group by AICategorFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AICategorFeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AICategorFeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AICategorFeedbackGroupByArgs['orderBy'] }
        : { orderBy?: AICategorFeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AICategorFeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAICategorFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AICategorFeedback model
   */
  readonly fields: AICategorFeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AICategorFeedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AICategorFeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    fragrance<T extends FragranceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FragranceDefaultArgs<ExtArgs>>): Prisma__FragranceClient<$Result.GetResult<Prisma.$FragrancePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AICategorFeedback model
   */ 
  interface AICategorFeedbackFieldRefs {
    readonly id: FieldRef<"AICategorFeedback", 'String'>
    readonly userId: FieldRef<"AICategorFeedback", 'String'>
    readonly fragranceId: FieldRef<"AICategorFeedback", 'String'>
    readonly aiSuggestion: FieldRef<"AICategorFeedback", 'Json'>
    readonly userCorrection: FieldRef<"AICategorFeedback", 'Json'>
    readonly feedbackType: FieldRef<"AICategorFeedback", 'String'>
    readonly createdAt: FieldRef<"AICategorFeedback", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AICategorFeedback findUnique
   */
  export type AICategorFeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICategorFeedback
     */
    select?: AICategorFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AICategorFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which AICategorFeedback to fetch.
     */
    where: AICategorFeedbackWhereUniqueInput
  }

  /**
   * AICategorFeedback findUniqueOrThrow
   */
  export type AICategorFeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICategorFeedback
     */
    select?: AICategorFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AICategorFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which AICategorFeedback to fetch.
     */
    where: AICategorFeedbackWhereUniqueInput
  }

  /**
   * AICategorFeedback findFirst
   */
  export type AICategorFeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICategorFeedback
     */
    select?: AICategorFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AICategorFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which AICategorFeedback to fetch.
     */
    where?: AICategorFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AICategorFeedbacks to fetch.
     */
    orderBy?: AICategorFeedbackOrderByWithRelationInput | AICategorFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AICategorFeedbacks.
     */
    cursor?: AICategorFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AICategorFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AICategorFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AICategorFeedbacks.
     */
    distinct?: AICategorFeedbackScalarFieldEnum | AICategorFeedbackScalarFieldEnum[]
  }

  /**
   * AICategorFeedback findFirstOrThrow
   */
  export type AICategorFeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICategorFeedback
     */
    select?: AICategorFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AICategorFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which AICategorFeedback to fetch.
     */
    where?: AICategorFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AICategorFeedbacks to fetch.
     */
    orderBy?: AICategorFeedbackOrderByWithRelationInput | AICategorFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AICategorFeedbacks.
     */
    cursor?: AICategorFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AICategorFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AICategorFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AICategorFeedbacks.
     */
    distinct?: AICategorFeedbackScalarFieldEnum | AICategorFeedbackScalarFieldEnum[]
  }

  /**
   * AICategorFeedback findMany
   */
  export type AICategorFeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICategorFeedback
     */
    select?: AICategorFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AICategorFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which AICategorFeedbacks to fetch.
     */
    where?: AICategorFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AICategorFeedbacks to fetch.
     */
    orderBy?: AICategorFeedbackOrderByWithRelationInput | AICategorFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AICategorFeedbacks.
     */
    cursor?: AICategorFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AICategorFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AICategorFeedbacks.
     */
    skip?: number
    distinct?: AICategorFeedbackScalarFieldEnum | AICategorFeedbackScalarFieldEnum[]
  }

  /**
   * AICategorFeedback create
   */
  export type AICategorFeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICategorFeedback
     */
    select?: AICategorFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AICategorFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a AICategorFeedback.
     */
    data: XOR<AICategorFeedbackCreateInput, AICategorFeedbackUncheckedCreateInput>
  }

  /**
   * AICategorFeedback createMany
   */
  export type AICategorFeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AICategorFeedbacks.
     */
    data: AICategorFeedbackCreateManyInput | AICategorFeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AICategorFeedback createManyAndReturn
   */
  export type AICategorFeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICategorFeedback
     */
    select?: AICategorFeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AICategorFeedbacks.
     */
    data: AICategorFeedbackCreateManyInput | AICategorFeedbackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AICategorFeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AICategorFeedback update
   */
  export type AICategorFeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICategorFeedback
     */
    select?: AICategorFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AICategorFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a AICategorFeedback.
     */
    data: XOR<AICategorFeedbackUpdateInput, AICategorFeedbackUncheckedUpdateInput>
    /**
     * Choose, which AICategorFeedback to update.
     */
    where: AICategorFeedbackWhereUniqueInput
  }

  /**
   * AICategorFeedback updateMany
   */
  export type AICategorFeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AICategorFeedbacks.
     */
    data: XOR<AICategorFeedbackUpdateManyMutationInput, AICategorFeedbackUncheckedUpdateManyInput>
    /**
     * Filter which AICategorFeedbacks to update
     */
    where?: AICategorFeedbackWhereInput
  }

  /**
   * AICategorFeedback upsert
   */
  export type AICategorFeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICategorFeedback
     */
    select?: AICategorFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AICategorFeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the AICategorFeedback to update in case it exists.
     */
    where: AICategorFeedbackWhereUniqueInput
    /**
     * In case the AICategorFeedback found by the `where` argument doesn't exist, create a new AICategorFeedback with this data.
     */
    create: XOR<AICategorFeedbackCreateInput, AICategorFeedbackUncheckedCreateInput>
    /**
     * In case the AICategorFeedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AICategorFeedbackUpdateInput, AICategorFeedbackUncheckedUpdateInput>
  }

  /**
   * AICategorFeedback delete
   */
  export type AICategorFeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICategorFeedback
     */
    select?: AICategorFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AICategorFeedbackInclude<ExtArgs> | null
    /**
     * Filter which AICategorFeedback to delete.
     */
    where: AICategorFeedbackWhereUniqueInput
  }

  /**
   * AICategorFeedback deleteMany
   */
  export type AICategorFeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AICategorFeedbacks to delete
     */
    where?: AICategorFeedbackWhereInput
  }

  /**
   * AICategorFeedback without action
   */
  export type AICategorFeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICategorFeedback
     */
    select?: AICategorFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AICategorFeedbackInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    passwordHash: 'passwordHash',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FragranceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    brand: 'brand',
    year: 'year',
    concentration: 'concentration',
    topNotes: 'topNotes',
    middleNotes: 'middleNotes',
    baseNotes: 'baseNotes',
    aiSeasons: 'aiSeasons',
    aiOccasions: 'aiOccasions',
    aiMoods: 'aiMoods',
    fragranticaSeasons: 'fragranticaSeasons',
    communityRating: 'communityRating',
    verified: 'verified',
    longevity: 'longevity',
    sillage: 'sillage',
    projection: 'projection',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FragranceScalarFieldEnum = (typeof FragranceScalarFieldEnum)[keyof typeof FragranceScalarFieldEnum]


  export const CollectionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CollectionScalarFieldEnum = (typeof CollectionScalarFieldEnum)[keyof typeof CollectionScalarFieldEnum]


  export const CollectionItemScalarFieldEnum: {
    id: 'id',
    collectionId: 'collectionId',
    fragranceId: 'fragranceId',
    personalRating: 'personalRating',
    personalNotes: 'personalNotes',
    purchaseDate: 'purchaseDate',
    bottleSize: 'bottleSize',
    createdAt: 'createdAt'
  };

  export type CollectionItemScalarFieldEnum = (typeof CollectionItemScalarFieldEnum)[keyof typeof CollectionItemScalarFieldEnum]


  export const BattleScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    description: 'description',
    status: 'status',
    createdAt: 'createdAt',
    completedAt: 'completedAt'
  };

  export type BattleScalarFieldEnum = (typeof BattleScalarFieldEnum)[keyof typeof BattleScalarFieldEnum]


  export const BattleItemScalarFieldEnum: {
    id: 'id',
    battleId: 'battleId',
    fragranceId: 'fragranceId',
    position: 'position',
    votes: 'votes',
    winner: 'winner'
  };

  export type BattleItemScalarFieldEnum = (typeof BattleItemScalarFieldEnum)[keyof typeof BattleItemScalarFieldEnum]


  export const AICategorFeedbackScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    fragranceId: 'fragranceId',
    aiSuggestion: 'aiSuggestion',
    userCorrection: 'userCorrection',
    feedbackType: 'feedbackType',
    createdAt: 'createdAt'
  };

  export type AICategorFeedbackScalarFieldEnum = (typeof AICategorFeedbackScalarFieldEnum)[keyof typeof AICategorFeedbackScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'BattleStatus'
   */
  export type EnumBattleStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BattleStatus'>
    


  /**
   * Reference to a field of type 'BattleStatus[]'
   */
  export type ListEnumBattleStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BattleStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    collections?: CollectionListRelationFilter
    battles?: BattleListRelationFilter
    feedbacks?: AICategorFeedbackListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    collections?: CollectionOrderByRelationAggregateInput
    battles?: BattleOrderByRelationAggregateInput
    feedbacks?: AICategorFeedbackOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    collections?: CollectionListRelationFilter
    battles?: BattleListRelationFilter
    feedbacks?: AICategorFeedbackListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type FragranceWhereInput = {
    AND?: FragranceWhereInput | FragranceWhereInput[]
    OR?: FragranceWhereInput[]
    NOT?: FragranceWhereInput | FragranceWhereInput[]
    id?: StringFilter<"Fragrance"> | string
    name?: StringFilter<"Fragrance"> | string
    brand?: StringFilter<"Fragrance"> | string
    year?: IntNullableFilter<"Fragrance"> | number | null
    concentration?: StringNullableFilter<"Fragrance"> | string | null
    topNotes?: StringNullableListFilter<"Fragrance">
    middleNotes?: StringNullableListFilter<"Fragrance">
    baseNotes?: StringNullableListFilter<"Fragrance">
    aiSeasons?: StringNullableListFilter<"Fragrance">
    aiOccasions?: StringNullableListFilter<"Fragrance">
    aiMoods?: StringNullableListFilter<"Fragrance">
    fragranticaSeasons?: StringNullableListFilter<"Fragrance">
    communityRating?: FloatNullableFilter<"Fragrance"> | number | null
    verified?: BoolFilter<"Fragrance"> | boolean
    longevity?: IntNullableFilter<"Fragrance"> | number | null
    sillage?: IntNullableFilter<"Fragrance"> | number | null
    projection?: IntNullableFilter<"Fragrance"> | number | null
    createdAt?: DateTimeFilter<"Fragrance"> | Date | string
    updatedAt?: DateTimeFilter<"Fragrance"> | Date | string
    collections?: CollectionItemListRelationFilter
    battleItems?: BattleItemListRelationFilter
    feedbacks?: AICategorFeedbackListRelationFilter
  }

  export type FragranceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    year?: SortOrderInput | SortOrder
    concentration?: SortOrderInput | SortOrder
    topNotes?: SortOrder
    middleNotes?: SortOrder
    baseNotes?: SortOrder
    aiSeasons?: SortOrder
    aiOccasions?: SortOrder
    aiMoods?: SortOrder
    fragranticaSeasons?: SortOrder
    communityRating?: SortOrderInput | SortOrder
    verified?: SortOrder
    longevity?: SortOrderInput | SortOrder
    sillage?: SortOrderInput | SortOrder
    projection?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    collections?: CollectionItemOrderByRelationAggregateInput
    battleItems?: BattleItemOrderByRelationAggregateInput
    feedbacks?: AICategorFeedbackOrderByRelationAggregateInput
  }

  export type FragranceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FragranceWhereInput | FragranceWhereInput[]
    OR?: FragranceWhereInput[]
    NOT?: FragranceWhereInput | FragranceWhereInput[]
    name?: StringFilter<"Fragrance"> | string
    brand?: StringFilter<"Fragrance"> | string
    year?: IntNullableFilter<"Fragrance"> | number | null
    concentration?: StringNullableFilter<"Fragrance"> | string | null
    topNotes?: StringNullableListFilter<"Fragrance">
    middleNotes?: StringNullableListFilter<"Fragrance">
    baseNotes?: StringNullableListFilter<"Fragrance">
    aiSeasons?: StringNullableListFilter<"Fragrance">
    aiOccasions?: StringNullableListFilter<"Fragrance">
    aiMoods?: StringNullableListFilter<"Fragrance">
    fragranticaSeasons?: StringNullableListFilter<"Fragrance">
    communityRating?: FloatNullableFilter<"Fragrance"> | number | null
    verified?: BoolFilter<"Fragrance"> | boolean
    longevity?: IntNullableFilter<"Fragrance"> | number | null
    sillage?: IntNullableFilter<"Fragrance"> | number | null
    projection?: IntNullableFilter<"Fragrance"> | number | null
    createdAt?: DateTimeFilter<"Fragrance"> | Date | string
    updatedAt?: DateTimeFilter<"Fragrance"> | Date | string
    collections?: CollectionItemListRelationFilter
    battleItems?: BattleItemListRelationFilter
    feedbacks?: AICategorFeedbackListRelationFilter
  }, "id">

  export type FragranceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    year?: SortOrderInput | SortOrder
    concentration?: SortOrderInput | SortOrder
    topNotes?: SortOrder
    middleNotes?: SortOrder
    baseNotes?: SortOrder
    aiSeasons?: SortOrder
    aiOccasions?: SortOrder
    aiMoods?: SortOrder
    fragranticaSeasons?: SortOrder
    communityRating?: SortOrderInput | SortOrder
    verified?: SortOrder
    longevity?: SortOrderInput | SortOrder
    sillage?: SortOrderInput | SortOrder
    projection?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FragranceCountOrderByAggregateInput
    _avg?: FragranceAvgOrderByAggregateInput
    _max?: FragranceMaxOrderByAggregateInput
    _min?: FragranceMinOrderByAggregateInput
    _sum?: FragranceSumOrderByAggregateInput
  }

  export type FragranceScalarWhereWithAggregatesInput = {
    AND?: FragranceScalarWhereWithAggregatesInput | FragranceScalarWhereWithAggregatesInput[]
    OR?: FragranceScalarWhereWithAggregatesInput[]
    NOT?: FragranceScalarWhereWithAggregatesInput | FragranceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Fragrance"> | string
    name?: StringWithAggregatesFilter<"Fragrance"> | string
    brand?: StringWithAggregatesFilter<"Fragrance"> | string
    year?: IntNullableWithAggregatesFilter<"Fragrance"> | number | null
    concentration?: StringNullableWithAggregatesFilter<"Fragrance"> | string | null
    topNotes?: StringNullableListFilter<"Fragrance">
    middleNotes?: StringNullableListFilter<"Fragrance">
    baseNotes?: StringNullableListFilter<"Fragrance">
    aiSeasons?: StringNullableListFilter<"Fragrance">
    aiOccasions?: StringNullableListFilter<"Fragrance">
    aiMoods?: StringNullableListFilter<"Fragrance">
    fragranticaSeasons?: StringNullableListFilter<"Fragrance">
    communityRating?: FloatNullableWithAggregatesFilter<"Fragrance"> | number | null
    verified?: BoolWithAggregatesFilter<"Fragrance"> | boolean
    longevity?: IntNullableWithAggregatesFilter<"Fragrance"> | number | null
    sillage?: IntNullableWithAggregatesFilter<"Fragrance"> | number | null
    projection?: IntNullableWithAggregatesFilter<"Fragrance"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Fragrance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Fragrance"> | Date | string
  }

  export type CollectionWhereInput = {
    AND?: CollectionWhereInput | CollectionWhereInput[]
    OR?: CollectionWhereInput[]
    NOT?: CollectionWhereInput | CollectionWhereInput[]
    id?: StringFilter<"Collection"> | string
    userId?: StringFilter<"Collection"> | string
    name?: StringFilter<"Collection"> | string
    description?: StringNullableFilter<"Collection"> | string | null
    createdAt?: DateTimeFilter<"Collection"> | Date | string
    updatedAt?: DateTimeFilter<"Collection"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    items?: CollectionItemListRelationFilter
  }

  export type CollectionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    items?: CollectionItemOrderByRelationAggregateInput
  }

  export type CollectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CollectionWhereInput | CollectionWhereInput[]
    OR?: CollectionWhereInput[]
    NOT?: CollectionWhereInput | CollectionWhereInput[]
    userId?: StringFilter<"Collection"> | string
    name?: StringFilter<"Collection"> | string
    description?: StringNullableFilter<"Collection"> | string | null
    createdAt?: DateTimeFilter<"Collection"> | Date | string
    updatedAt?: DateTimeFilter<"Collection"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    items?: CollectionItemListRelationFilter
  }, "id">

  export type CollectionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CollectionCountOrderByAggregateInput
    _max?: CollectionMaxOrderByAggregateInput
    _min?: CollectionMinOrderByAggregateInput
  }

  export type CollectionScalarWhereWithAggregatesInput = {
    AND?: CollectionScalarWhereWithAggregatesInput | CollectionScalarWhereWithAggregatesInput[]
    OR?: CollectionScalarWhereWithAggregatesInput[]
    NOT?: CollectionScalarWhereWithAggregatesInput | CollectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Collection"> | string
    userId?: StringWithAggregatesFilter<"Collection"> | string
    name?: StringWithAggregatesFilter<"Collection"> | string
    description?: StringNullableWithAggregatesFilter<"Collection"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Collection"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Collection"> | Date | string
  }

  export type CollectionItemWhereInput = {
    AND?: CollectionItemWhereInput | CollectionItemWhereInput[]
    OR?: CollectionItemWhereInput[]
    NOT?: CollectionItemWhereInput | CollectionItemWhereInput[]
    id?: StringFilter<"CollectionItem"> | string
    collectionId?: StringFilter<"CollectionItem"> | string
    fragranceId?: StringFilter<"CollectionItem"> | string
    personalRating?: IntNullableFilter<"CollectionItem"> | number | null
    personalNotes?: StringNullableFilter<"CollectionItem"> | string | null
    purchaseDate?: DateTimeNullableFilter<"CollectionItem"> | Date | string | null
    bottleSize?: StringNullableFilter<"CollectionItem"> | string | null
    createdAt?: DateTimeFilter<"CollectionItem"> | Date | string
    collection?: XOR<CollectionRelationFilter, CollectionWhereInput>
    fragrance?: XOR<FragranceRelationFilter, FragranceWhereInput>
  }

  export type CollectionItemOrderByWithRelationInput = {
    id?: SortOrder
    collectionId?: SortOrder
    fragranceId?: SortOrder
    personalRating?: SortOrderInput | SortOrder
    personalNotes?: SortOrderInput | SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    bottleSize?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    collection?: CollectionOrderByWithRelationInput
    fragrance?: FragranceOrderByWithRelationInput
  }

  export type CollectionItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    collectionId_fragranceId?: CollectionItemCollectionIdFragranceIdCompoundUniqueInput
    AND?: CollectionItemWhereInput | CollectionItemWhereInput[]
    OR?: CollectionItemWhereInput[]
    NOT?: CollectionItemWhereInput | CollectionItemWhereInput[]
    collectionId?: StringFilter<"CollectionItem"> | string
    fragranceId?: StringFilter<"CollectionItem"> | string
    personalRating?: IntNullableFilter<"CollectionItem"> | number | null
    personalNotes?: StringNullableFilter<"CollectionItem"> | string | null
    purchaseDate?: DateTimeNullableFilter<"CollectionItem"> | Date | string | null
    bottleSize?: StringNullableFilter<"CollectionItem"> | string | null
    createdAt?: DateTimeFilter<"CollectionItem"> | Date | string
    collection?: XOR<CollectionRelationFilter, CollectionWhereInput>
    fragrance?: XOR<FragranceRelationFilter, FragranceWhereInput>
  }, "id" | "collectionId_fragranceId">

  export type CollectionItemOrderByWithAggregationInput = {
    id?: SortOrder
    collectionId?: SortOrder
    fragranceId?: SortOrder
    personalRating?: SortOrderInput | SortOrder
    personalNotes?: SortOrderInput | SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    bottleSize?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CollectionItemCountOrderByAggregateInput
    _avg?: CollectionItemAvgOrderByAggregateInput
    _max?: CollectionItemMaxOrderByAggregateInput
    _min?: CollectionItemMinOrderByAggregateInput
    _sum?: CollectionItemSumOrderByAggregateInput
  }

  export type CollectionItemScalarWhereWithAggregatesInput = {
    AND?: CollectionItemScalarWhereWithAggregatesInput | CollectionItemScalarWhereWithAggregatesInput[]
    OR?: CollectionItemScalarWhereWithAggregatesInput[]
    NOT?: CollectionItemScalarWhereWithAggregatesInput | CollectionItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CollectionItem"> | string
    collectionId?: StringWithAggregatesFilter<"CollectionItem"> | string
    fragranceId?: StringWithAggregatesFilter<"CollectionItem"> | string
    personalRating?: IntNullableWithAggregatesFilter<"CollectionItem"> | number | null
    personalNotes?: StringNullableWithAggregatesFilter<"CollectionItem"> | string | null
    purchaseDate?: DateTimeNullableWithAggregatesFilter<"CollectionItem"> | Date | string | null
    bottleSize?: StringNullableWithAggregatesFilter<"CollectionItem"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CollectionItem"> | Date | string
  }

  export type BattleWhereInput = {
    AND?: BattleWhereInput | BattleWhereInput[]
    OR?: BattleWhereInput[]
    NOT?: BattleWhereInput | BattleWhereInput[]
    id?: StringFilter<"Battle"> | string
    userId?: StringFilter<"Battle"> | string
    title?: StringFilter<"Battle"> | string
    description?: StringNullableFilter<"Battle"> | string | null
    status?: EnumBattleStatusFilter<"Battle"> | $Enums.BattleStatus
    createdAt?: DateTimeFilter<"Battle"> | Date | string
    completedAt?: DateTimeNullableFilter<"Battle"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    items?: BattleItemListRelationFilter
  }

  export type BattleOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    items?: BattleItemOrderByRelationAggregateInput
  }

  export type BattleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BattleWhereInput | BattleWhereInput[]
    OR?: BattleWhereInput[]
    NOT?: BattleWhereInput | BattleWhereInput[]
    userId?: StringFilter<"Battle"> | string
    title?: StringFilter<"Battle"> | string
    description?: StringNullableFilter<"Battle"> | string | null
    status?: EnumBattleStatusFilter<"Battle"> | $Enums.BattleStatus
    createdAt?: DateTimeFilter<"Battle"> | Date | string
    completedAt?: DateTimeNullableFilter<"Battle"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    items?: BattleItemListRelationFilter
  }, "id">

  export type BattleOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    _count?: BattleCountOrderByAggregateInput
    _max?: BattleMaxOrderByAggregateInput
    _min?: BattleMinOrderByAggregateInput
  }

  export type BattleScalarWhereWithAggregatesInput = {
    AND?: BattleScalarWhereWithAggregatesInput | BattleScalarWhereWithAggregatesInput[]
    OR?: BattleScalarWhereWithAggregatesInput[]
    NOT?: BattleScalarWhereWithAggregatesInput | BattleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Battle"> | string
    userId?: StringWithAggregatesFilter<"Battle"> | string
    title?: StringWithAggregatesFilter<"Battle"> | string
    description?: StringNullableWithAggregatesFilter<"Battle"> | string | null
    status?: EnumBattleStatusWithAggregatesFilter<"Battle"> | $Enums.BattleStatus
    createdAt?: DateTimeWithAggregatesFilter<"Battle"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"Battle"> | Date | string | null
  }

  export type BattleItemWhereInput = {
    AND?: BattleItemWhereInput | BattleItemWhereInput[]
    OR?: BattleItemWhereInput[]
    NOT?: BattleItemWhereInput | BattleItemWhereInput[]
    id?: StringFilter<"BattleItem"> | string
    battleId?: StringFilter<"BattleItem"> | string
    fragranceId?: StringFilter<"BattleItem"> | string
    position?: IntFilter<"BattleItem"> | number
    votes?: IntFilter<"BattleItem"> | number
    winner?: BoolFilter<"BattleItem"> | boolean
    battle?: XOR<BattleRelationFilter, BattleWhereInput>
    fragrance?: XOR<FragranceRelationFilter, FragranceWhereInput>
  }

  export type BattleItemOrderByWithRelationInput = {
    id?: SortOrder
    battleId?: SortOrder
    fragranceId?: SortOrder
    position?: SortOrder
    votes?: SortOrder
    winner?: SortOrder
    battle?: BattleOrderByWithRelationInput
    fragrance?: FragranceOrderByWithRelationInput
  }

  export type BattleItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    battleId_fragranceId?: BattleItemBattleIdFragranceIdCompoundUniqueInput
    AND?: BattleItemWhereInput | BattleItemWhereInput[]
    OR?: BattleItemWhereInput[]
    NOT?: BattleItemWhereInput | BattleItemWhereInput[]
    battleId?: StringFilter<"BattleItem"> | string
    fragranceId?: StringFilter<"BattleItem"> | string
    position?: IntFilter<"BattleItem"> | number
    votes?: IntFilter<"BattleItem"> | number
    winner?: BoolFilter<"BattleItem"> | boolean
    battle?: XOR<BattleRelationFilter, BattleWhereInput>
    fragrance?: XOR<FragranceRelationFilter, FragranceWhereInput>
  }, "id" | "battleId_fragranceId">

  export type BattleItemOrderByWithAggregationInput = {
    id?: SortOrder
    battleId?: SortOrder
    fragranceId?: SortOrder
    position?: SortOrder
    votes?: SortOrder
    winner?: SortOrder
    _count?: BattleItemCountOrderByAggregateInput
    _avg?: BattleItemAvgOrderByAggregateInput
    _max?: BattleItemMaxOrderByAggregateInput
    _min?: BattleItemMinOrderByAggregateInput
    _sum?: BattleItemSumOrderByAggregateInput
  }

  export type BattleItemScalarWhereWithAggregatesInput = {
    AND?: BattleItemScalarWhereWithAggregatesInput | BattleItemScalarWhereWithAggregatesInput[]
    OR?: BattleItemScalarWhereWithAggregatesInput[]
    NOT?: BattleItemScalarWhereWithAggregatesInput | BattleItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BattleItem"> | string
    battleId?: StringWithAggregatesFilter<"BattleItem"> | string
    fragranceId?: StringWithAggregatesFilter<"BattleItem"> | string
    position?: IntWithAggregatesFilter<"BattleItem"> | number
    votes?: IntWithAggregatesFilter<"BattleItem"> | number
    winner?: BoolWithAggregatesFilter<"BattleItem"> | boolean
  }

  export type AICategorFeedbackWhereInput = {
    AND?: AICategorFeedbackWhereInput | AICategorFeedbackWhereInput[]
    OR?: AICategorFeedbackWhereInput[]
    NOT?: AICategorFeedbackWhereInput | AICategorFeedbackWhereInput[]
    id?: StringFilter<"AICategorFeedback"> | string
    userId?: StringFilter<"AICategorFeedback"> | string
    fragranceId?: StringFilter<"AICategorFeedback"> | string
    aiSuggestion?: JsonFilter<"AICategorFeedback">
    userCorrection?: JsonFilter<"AICategorFeedback">
    feedbackType?: StringFilter<"AICategorFeedback"> | string
    createdAt?: DateTimeFilter<"AICategorFeedback"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    fragrance?: XOR<FragranceRelationFilter, FragranceWhereInput>
  }

  export type AICategorFeedbackOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    fragranceId?: SortOrder
    aiSuggestion?: SortOrder
    userCorrection?: SortOrder
    feedbackType?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    fragrance?: FragranceOrderByWithRelationInput
  }

  export type AICategorFeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AICategorFeedbackWhereInput | AICategorFeedbackWhereInput[]
    OR?: AICategorFeedbackWhereInput[]
    NOT?: AICategorFeedbackWhereInput | AICategorFeedbackWhereInput[]
    userId?: StringFilter<"AICategorFeedback"> | string
    fragranceId?: StringFilter<"AICategorFeedback"> | string
    aiSuggestion?: JsonFilter<"AICategorFeedback">
    userCorrection?: JsonFilter<"AICategorFeedback">
    feedbackType?: StringFilter<"AICategorFeedback"> | string
    createdAt?: DateTimeFilter<"AICategorFeedback"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    fragrance?: XOR<FragranceRelationFilter, FragranceWhereInput>
  }, "id">

  export type AICategorFeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    fragranceId?: SortOrder
    aiSuggestion?: SortOrder
    userCorrection?: SortOrder
    feedbackType?: SortOrder
    createdAt?: SortOrder
    _count?: AICategorFeedbackCountOrderByAggregateInput
    _max?: AICategorFeedbackMaxOrderByAggregateInput
    _min?: AICategorFeedbackMinOrderByAggregateInput
  }

  export type AICategorFeedbackScalarWhereWithAggregatesInput = {
    AND?: AICategorFeedbackScalarWhereWithAggregatesInput | AICategorFeedbackScalarWhereWithAggregatesInput[]
    OR?: AICategorFeedbackScalarWhereWithAggregatesInput[]
    NOT?: AICategorFeedbackScalarWhereWithAggregatesInput | AICategorFeedbackScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AICategorFeedback"> | string
    userId?: StringWithAggregatesFilter<"AICategorFeedback"> | string
    fragranceId?: StringWithAggregatesFilter<"AICategorFeedback"> | string
    aiSuggestion?: JsonWithAggregatesFilter<"AICategorFeedback">
    userCorrection?: JsonWithAggregatesFilter<"AICategorFeedback">
    feedbackType?: StringWithAggregatesFilter<"AICategorFeedback"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AICategorFeedback"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionCreateNestedManyWithoutUserInput
    battles?: BattleCreateNestedManyWithoutUserInput
    feedbacks?: AICategorFeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionUncheckedCreateNestedManyWithoutUserInput
    battles?: BattleUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: AICategorFeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionUpdateManyWithoutUserNestedInput
    battles?: BattleUpdateManyWithoutUserNestedInput
    feedbacks?: AICategorFeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionUncheckedUpdateManyWithoutUserNestedInput
    battles?: BattleUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: AICategorFeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FragranceCreateInput = {
    id?: string
    name: string
    brand: string
    year?: number | null
    concentration?: string | null
    topNotes?: FragranceCreatetopNotesInput | string[]
    middleNotes?: FragranceCreatemiddleNotesInput | string[]
    baseNotes?: FragranceCreatebaseNotesInput | string[]
    aiSeasons?: FragranceCreateaiSeasonsInput | string[]
    aiOccasions?: FragranceCreateaiOccasionsInput | string[]
    aiMoods?: FragranceCreateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceCreatefragranticaSeasonsInput | string[]
    communityRating?: number | null
    verified?: boolean
    longevity?: number | null
    sillage?: number | null
    projection?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionItemCreateNestedManyWithoutFragranceInput
    battleItems?: BattleItemCreateNestedManyWithoutFragranceInput
    feedbacks?: AICategorFeedbackCreateNestedManyWithoutFragranceInput
  }

  export type FragranceUncheckedCreateInput = {
    id?: string
    name: string
    brand: string
    year?: number | null
    concentration?: string | null
    topNotes?: FragranceCreatetopNotesInput | string[]
    middleNotes?: FragranceCreatemiddleNotesInput | string[]
    baseNotes?: FragranceCreatebaseNotesInput | string[]
    aiSeasons?: FragranceCreateaiSeasonsInput | string[]
    aiOccasions?: FragranceCreateaiOccasionsInput | string[]
    aiMoods?: FragranceCreateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceCreatefragranticaSeasonsInput | string[]
    communityRating?: number | null
    verified?: boolean
    longevity?: number | null
    sillage?: number | null
    projection?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionItemUncheckedCreateNestedManyWithoutFragranceInput
    battleItems?: BattleItemUncheckedCreateNestedManyWithoutFragranceInput
    feedbacks?: AICategorFeedbackUncheckedCreateNestedManyWithoutFragranceInput
  }

  export type FragranceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    topNotes?: FragranceUpdatetopNotesInput | string[]
    middleNotes?: FragranceUpdatemiddleNotesInput | string[]
    baseNotes?: FragranceUpdatebaseNotesInput | string[]
    aiSeasons?: FragranceUpdateaiSeasonsInput | string[]
    aiOccasions?: FragranceUpdateaiOccasionsInput | string[]
    aiMoods?: FragranceUpdateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceUpdatefragranticaSeasonsInput | string[]
    communityRating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    longevity?: NullableIntFieldUpdateOperationsInput | number | null
    sillage?: NullableIntFieldUpdateOperationsInput | number | null
    projection?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionItemUpdateManyWithoutFragranceNestedInput
    battleItems?: BattleItemUpdateManyWithoutFragranceNestedInput
    feedbacks?: AICategorFeedbackUpdateManyWithoutFragranceNestedInput
  }

  export type FragranceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    topNotes?: FragranceUpdatetopNotesInput | string[]
    middleNotes?: FragranceUpdatemiddleNotesInput | string[]
    baseNotes?: FragranceUpdatebaseNotesInput | string[]
    aiSeasons?: FragranceUpdateaiSeasonsInput | string[]
    aiOccasions?: FragranceUpdateaiOccasionsInput | string[]
    aiMoods?: FragranceUpdateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceUpdatefragranticaSeasonsInput | string[]
    communityRating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    longevity?: NullableIntFieldUpdateOperationsInput | number | null
    sillage?: NullableIntFieldUpdateOperationsInput | number | null
    projection?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionItemUncheckedUpdateManyWithoutFragranceNestedInput
    battleItems?: BattleItemUncheckedUpdateManyWithoutFragranceNestedInput
    feedbacks?: AICategorFeedbackUncheckedUpdateManyWithoutFragranceNestedInput
  }

  export type FragranceCreateManyInput = {
    id?: string
    name: string
    brand: string
    year?: number | null
    concentration?: string | null
    topNotes?: FragranceCreatetopNotesInput | string[]
    middleNotes?: FragranceCreatemiddleNotesInput | string[]
    baseNotes?: FragranceCreatebaseNotesInput | string[]
    aiSeasons?: FragranceCreateaiSeasonsInput | string[]
    aiOccasions?: FragranceCreateaiOccasionsInput | string[]
    aiMoods?: FragranceCreateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceCreatefragranticaSeasonsInput | string[]
    communityRating?: number | null
    verified?: boolean
    longevity?: number | null
    sillage?: number | null
    projection?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FragranceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    topNotes?: FragranceUpdatetopNotesInput | string[]
    middleNotes?: FragranceUpdatemiddleNotesInput | string[]
    baseNotes?: FragranceUpdatebaseNotesInput | string[]
    aiSeasons?: FragranceUpdateaiSeasonsInput | string[]
    aiOccasions?: FragranceUpdateaiOccasionsInput | string[]
    aiMoods?: FragranceUpdateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceUpdatefragranticaSeasonsInput | string[]
    communityRating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    longevity?: NullableIntFieldUpdateOperationsInput | number | null
    sillage?: NullableIntFieldUpdateOperationsInput | number | null
    projection?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FragranceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    topNotes?: FragranceUpdatetopNotesInput | string[]
    middleNotes?: FragranceUpdatemiddleNotesInput | string[]
    baseNotes?: FragranceUpdatebaseNotesInput | string[]
    aiSeasons?: FragranceUpdateaiSeasonsInput | string[]
    aiOccasions?: FragranceUpdateaiOccasionsInput | string[]
    aiMoods?: FragranceUpdateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceUpdatefragranticaSeasonsInput | string[]
    communityRating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    longevity?: NullableIntFieldUpdateOperationsInput | number | null
    sillage?: NullableIntFieldUpdateOperationsInput | number | null
    projection?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionCreateInput = {
    id?: string
    name?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCollectionsInput
    items?: CollectionItemCreateNestedManyWithoutCollectionInput
  }

  export type CollectionUncheckedCreateInput = {
    id?: string
    userId: string
    name?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: CollectionItemUncheckedCreateNestedManyWithoutCollectionInput
  }

  export type CollectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCollectionsNestedInput
    items?: CollectionItemUpdateManyWithoutCollectionNestedInput
  }

  export type CollectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: CollectionItemUncheckedUpdateManyWithoutCollectionNestedInput
  }

  export type CollectionCreateManyInput = {
    id?: string
    userId: string
    name?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CollectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionItemCreateInput = {
    id?: string
    personalRating?: number | null
    personalNotes?: string | null
    purchaseDate?: Date | string | null
    bottleSize?: string | null
    createdAt?: Date | string
    collection: CollectionCreateNestedOneWithoutItemsInput
    fragrance: FragranceCreateNestedOneWithoutCollectionsInput
  }

  export type CollectionItemUncheckedCreateInput = {
    id?: string
    collectionId: string
    fragranceId: string
    personalRating?: number | null
    personalNotes?: string | null
    purchaseDate?: Date | string | null
    bottleSize?: string | null
    createdAt?: Date | string
  }

  export type CollectionItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    personalRating?: NullableIntFieldUpdateOperationsInput | number | null
    personalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bottleSize?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collection?: CollectionUpdateOneRequiredWithoutItemsNestedInput
    fragrance?: FragranceUpdateOneRequiredWithoutCollectionsNestedInput
  }

  export type CollectionItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    collectionId?: StringFieldUpdateOperationsInput | string
    fragranceId?: StringFieldUpdateOperationsInput | string
    personalRating?: NullableIntFieldUpdateOperationsInput | number | null
    personalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bottleSize?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionItemCreateManyInput = {
    id?: string
    collectionId: string
    fragranceId: string
    personalRating?: number | null
    personalNotes?: string | null
    purchaseDate?: Date | string | null
    bottleSize?: string | null
    createdAt?: Date | string
  }

  export type CollectionItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    personalRating?: NullableIntFieldUpdateOperationsInput | number | null
    personalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bottleSize?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    collectionId?: StringFieldUpdateOperationsInput | string
    fragranceId?: StringFieldUpdateOperationsInput | string
    personalRating?: NullableIntFieldUpdateOperationsInput | number | null
    personalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bottleSize?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BattleCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.BattleStatus
    createdAt?: Date | string
    completedAt?: Date | string | null
    user: UserCreateNestedOneWithoutBattlesInput
    items?: BattleItemCreateNestedManyWithoutBattleInput
  }

  export type BattleUncheckedCreateInput = {
    id?: string
    userId: string
    title: string
    description?: string | null
    status?: $Enums.BattleStatus
    createdAt?: Date | string
    completedAt?: Date | string | null
    items?: BattleItemUncheckedCreateNestedManyWithoutBattleInput
  }

  export type BattleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutBattlesNestedInput
    items?: BattleItemUpdateManyWithoutBattleNestedInput
  }

  export type BattleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    items?: BattleItemUncheckedUpdateManyWithoutBattleNestedInput
  }

  export type BattleCreateManyInput = {
    id?: string
    userId: string
    title: string
    description?: string | null
    status?: $Enums.BattleStatus
    createdAt?: Date | string
    completedAt?: Date | string | null
  }

  export type BattleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BattleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BattleItemCreateInput = {
    id?: string
    position: number
    votes?: number
    winner?: boolean
    battle: BattleCreateNestedOneWithoutItemsInput
    fragrance: FragranceCreateNestedOneWithoutBattleItemsInput
  }

  export type BattleItemUncheckedCreateInput = {
    id?: string
    battleId: string
    fragranceId: string
    position: number
    votes?: number
    winner?: boolean
  }

  export type BattleItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    winner?: BoolFieldUpdateOperationsInput | boolean
    battle?: BattleUpdateOneRequiredWithoutItemsNestedInput
    fragrance?: FragranceUpdateOneRequiredWithoutBattleItemsNestedInput
  }

  export type BattleItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    fragranceId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    winner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BattleItemCreateManyInput = {
    id?: string
    battleId: string
    fragranceId: string
    position: number
    votes?: number
    winner?: boolean
  }

  export type BattleItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    winner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BattleItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    fragranceId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    winner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AICategorFeedbackCreateInput = {
    id?: string
    aiSuggestion: JsonNullValueInput | InputJsonValue
    userCorrection: JsonNullValueInput | InputJsonValue
    feedbackType: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFeedbacksInput
    fragrance: FragranceCreateNestedOneWithoutFeedbacksInput
  }

  export type AICategorFeedbackUncheckedCreateInput = {
    id?: string
    userId: string
    fragranceId: string
    aiSuggestion: JsonNullValueInput | InputJsonValue
    userCorrection: JsonNullValueInput | InputJsonValue
    feedbackType: string
    createdAt?: Date | string
  }

  export type AICategorFeedbackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    aiSuggestion?: JsonNullValueInput | InputJsonValue
    userCorrection?: JsonNullValueInput | InputJsonValue
    feedbackType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
    fragrance?: FragranceUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type AICategorFeedbackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fragranceId?: StringFieldUpdateOperationsInput | string
    aiSuggestion?: JsonNullValueInput | InputJsonValue
    userCorrection?: JsonNullValueInput | InputJsonValue
    feedbackType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AICategorFeedbackCreateManyInput = {
    id?: string
    userId: string
    fragranceId: string
    aiSuggestion: JsonNullValueInput | InputJsonValue
    userCorrection: JsonNullValueInput | InputJsonValue
    feedbackType: string
    createdAt?: Date | string
  }

  export type AICategorFeedbackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    aiSuggestion?: JsonNullValueInput | InputJsonValue
    userCorrection?: JsonNullValueInput | InputJsonValue
    feedbackType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AICategorFeedbackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fragranceId?: StringFieldUpdateOperationsInput | string
    aiSuggestion?: JsonNullValueInput | InputJsonValue
    userCorrection?: JsonNullValueInput | InputJsonValue
    feedbackType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CollectionListRelationFilter = {
    every?: CollectionWhereInput
    some?: CollectionWhereInput
    none?: CollectionWhereInput
  }

  export type BattleListRelationFilter = {
    every?: BattleWhereInput
    some?: BattleWhereInput
    none?: BattleWhereInput
  }

  export type AICategorFeedbackListRelationFilter = {
    every?: AICategorFeedbackWhereInput
    some?: AICategorFeedbackWhereInput
    none?: AICategorFeedbackWhereInput
  }

  export type CollectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BattleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AICategorFeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CollectionItemListRelationFilter = {
    every?: CollectionItemWhereInput
    some?: CollectionItemWhereInput
    none?: CollectionItemWhereInput
  }

  export type BattleItemListRelationFilter = {
    every?: BattleItemWhereInput
    some?: BattleItemWhereInput
    none?: BattleItemWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CollectionItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BattleItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FragranceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    year?: SortOrder
    concentration?: SortOrder
    topNotes?: SortOrder
    middleNotes?: SortOrder
    baseNotes?: SortOrder
    aiSeasons?: SortOrder
    aiOccasions?: SortOrder
    aiMoods?: SortOrder
    fragranticaSeasons?: SortOrder
    communityRating?: SortOrder
    verified?: SortOrder
    longevity?: SortOrder
    sillage?: SortOrder
    projection?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FragranceAvgOrderByAggregateInput = {
    year?: SortOrder
    communityRating?: SortOrder
    longevity?: SortOrder
    sillage?: SortOrder
    projection?: SortOrder
  }

  export type FragranceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    year?: SortOrder
    concentration?: SortOrder
    communityRating?: SortOrder
    verified?: SortOrder
    longevity?: SortOrder
    sillage?: SortOrder
    projection?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FragranceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    year?: SortOrder
    concentration?: SortOrder
    communityRating?: SortOrder
    verified?: SortOrder
    longevity?: SortOrder
    sillage?: SortOrder
    projection?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FragranceSumOrderByAggregateInput = {
    year?: SortOrder
    communityRating?: SortOrder
    longevity?: SortOrder
    sillage?: SortOrder
    projection?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CollectionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CollectionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CollectionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type CollectionRelationFilter = {
    is?: CollectionWhereInput
    isNot?: CollectionWhereInput
  }

  export type FragranceRelationFilter = {
    is?: FragranceWhereInput
    isNot?: FragranceWhereInput
  }

  export type CollectionItemCollectionIdFragranceIdCompoundUniqueInput = {
    collectionId: string
    fragranceId: string
  }

  export type CollectionItemCountOrderByAggregateInput = {
    id?: SortOrder
    collectionId?: SortOrder
    fragranceId?: SortOrder
    personalRating?: SortOrder
    personalNotes?: SortOrder
    purchaseDate?: SortOrder
    bottleSize?: SortOrder
    createdAt?: SortOrder
  }

  export type CollectionItemAvgOrderByAggregateInput = {
    personalRating?: SortOrder
  }

  export type CollectionItemMaxOrderByAggregateInput = {
    id?: SortOrder
    collectionId?: SortOrder
    fragranceId?: SortOrder
    personalRating?: SortOrder
    personalNotes?: SortOrder
    purchaseDate?: SortOrder
    bottleSize?: SortOrder
    createdAt?: SortOrder
  }

  export type CollectionItemMinOrderByAggregateInput = {
    id?: SortOrder
    collectionId?: SortOrder
    fragranceId?: SortOrder
    personalRating?: SortOrder
    personalNotes?: SortOrder
    purchaseDate?: SortOrder
    bottleSize?: SortOrder
    createdAt?: SortOrder
  }

  export type CollectionItemSumOrderByAggregateInput = {
    personalRating?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumBattleStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BattleStatus | EnumBattleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BattleStatus[] | ListEnumBattleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BattleStatus[] | ListEnumBattleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBattleStatusFilter<$PrismaModel> | $Enums.BattleStatus
  }

  export type BattleCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
  }

  export type BattleMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
  }

  export type BattleMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
  }

  export type EnumBattleStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BattleStatus | EnumBattleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BattleStatus[] | ListEnumBattleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BattleStatus[] | ListEnumBattleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBattleStatusWithAggregatesFilter<$PrismaModel> | $Enums.BattleStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBattleStatusFilter<$PrismaModel>
    _max?: NestedEnumBattleStatusFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BattleRelationFilter = {
    is?: BattleWhereInput
    isNot?: BattleWhereInput
  }

  export type BattleItemBattleIdFragranceIdCompoundUniqueInput = {
    battleId: string
    fragranceId: string
  }

  export type BattleItemCountOrderByAggregateInput = {
    id?: SortOrder
    battleId?: SortOrder
    fragranceId?: SortOrder
    position?: SortOrder
    votes?: SortOrder
    winner?: SortOrder
  }

  export type BattleItemAvgOrderByAggregateInput = {
    position?: SortOrder
    votes?: SortOrder
  }

  export type BattleItemMaxOrderByAggregateInput = {
    id?: SortOrder
    battleId?: SortOrder
    fragranceId?: SortOrder
    position?: SortOrder
    votes?: SortOrder
    winner?: SortOrder
  }

  export type BattleItemMinOrderByAggregateInput = {
    id?: SortOrder
    battleId?: SortOrder
    fragranceId?: SortOrder
    position?: SortOrder
    votes?: SortOrder
    winner?: SortOrder
  }

  export type BattleItemSumOrderByAggregateInput = {
    position?: SortOrder
    votes?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AICategorFeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fragranceId?: SortOrder
    aiSuggestion?: SortOrder
    userCorrection?: SortOrder
    feedbackType?: SortOrder
    createdAt?: SortOrder
  }

  export type AICategorFeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fragranceId?: SortOrder
    feedbackType?: SortOrder
    createdAt?: SortOrder
  }

  export type AICategorFeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fragranceId?: SortOrder
    feedbackType?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type CollectionCreateNestedManyWithoutUserInput = {
    create?: XOR<CollectionCreateWithoutUserInput, CollectionUncheckedCreateWithoutUserInput> | CollectionCreateWithoutUserInput[] | CollectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutUserInput | CollectionCreateOrConnectWithoutUserInput[]
    createMany?: CollectionCreateManyUserInputEnvelope
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
  }

  export type BattleCreateNestedManyWithoutUserInput = {
    create?: XOR<BattleCreateWithoutUserInput, BattleUncheckedCreateWithoutUserInput> | BattleCreateWithoutUserInput[] | BattleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BattleCreateOrConnectWithoutUserInput | BattleCreateOrConnectWithoutUserInput[]
    createMany?: BattleCreateManyUserInputEnvelope
    connect?: BattleWhereUniqueInput | BattleWhereUniqueInput[]
  }

  export type AICategorFeedbackCreateNestedManyWithoutUserInput = {
    create?: XOR<AICategorFeedbackCreateWithoutUserInput, AICategorFeedbackUncheckedCreateWithoutUserInput> | AICategorFeedbackCreateWithoutUserInput[] | AICategorFeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AICategorFeedbackCreateOrConnectWithoutUserInput | AICategorFeedbackCreateOrConnectWithoutUserInput[]
    createMany?: AICategorFeedbackCreateManyUserInputEnvelope
    connect?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
  }

  export type CollectionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CollectionCreateWithoutUserInput, CollectionUncheckedCreateWithoutUserInput> | CollectionCreateWithoutUserInput[] | CollectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutUserInput | CollectionCreateOrConnectWithoutUserInput[]
    createMany?: CollectionCreateManyUserInputEnvelope
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
  }

  export type BattleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BattleCreateWithoutUserInput, BattleUncheckedCreateWithoutUserInput> | BattleCreateWithoutUserInput[] | BattleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BattleCreateOrConnectWithoutUserInput | BattleCreateOrConnectWithoutUserInput[]
    createMany?: BattleCreateManyUserInputEnvelope
    connect?: BattleWhereUniqueInput | BattleWhereUniqueInput[]
  }

  export type AICategorFeedbackUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AICategorFeedbackCreateWithoutUserInput, AICategorFeedbackUncheckedCreateWithoutUserInput> | AICategorFeedbackCreateWithoutUserInput[] | AICategorFeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AICategorFeedbackCreateOrConnectWithoutUserInput | AICategorFeedbackCreateOrConnectWithoutUserInput[]
    createMany?: AICategorFeedbackCreateManyUserInputEnvelope
    connect?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CollectionUpdateManyWithoutUserNestedInput = {
    create?: XOR<CollectionCreateWithoutUserInput, CollectionUncheckedCreateWithoutUserInput> | CollectionCreateWithoutUserInput[] | CollectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutUserInput | CollectionCreateOrConnectWithoutUserInput[]
    upsert?: CollectionUpsertWithWhereUniqueWithoutUserInput | CollectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CollectionCreateManyUserInputEnvelope
    set?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    disconnect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    delete?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    update?: CollectionUpdateWithWhereUniqueWithoutUserInput | CollectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CollectionUpdateManyWithWhereWithoutUserInput | CollectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
  }

  export type BattleUpdateManyWithoutUserNestedInput = {
    create?: XOR<BattleCreateWithoutUserInput, BattleUncheckedCreateWithoutUserInput> | BattleCreateWithoutUserInput[] | BattleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BattleCreateOrConnectWithoutUserInput | BattleCreateOrConnectWithoutUserInput[]
    upsert?: BattleUpsertWithWhereUniqueWithoutUserInput | BattleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BattleCreateManyUserInputEnvelope
    set?: BattleWhereUniqueInput | BattleWhereUniqueInput[]
    disconnect?: BattleWhereUniqueInput | BattleWhereUniqueInput[]
    delete?: BattleWhereUniqueInput | BattleWhereUniqueInput[]
    connect?: BattleWhereUniqueInput | BattleWhereUniqueInput[]
    update?: BattleUpdateWithWhereUniqueWithoutUserInput | BattleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BattleUpdateManyWithWhereWithoutUserInput | BattleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BattleScalarWhereInput | BattleScalarWhereInput[]
  }

  export type AICategorFeedbackUpdateManyWithoutUserNestedInput = {
    create?: XOR<AICategorFeedbackCreateWithoutUserInput, AICategorFeedbackUncheckedCreateWithoutUserInput> | AICategorFeedbackCreateWithoutUserInput[] | AICategorFeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AICategorFeedbackCreateOrConnectWithoutUserInput | AICategorFeedbackCreateOrConnectWithoutUserInput[]
    upsert?: AICategorFeedbackUpsertWithWhereUniqueWithoutUserInput | AICategorFeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AICategorFeedbackCreateManyUserInputEnvelope
    set?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
    disconnect?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
    delete?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
    connect?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
    update?: AICategorFeedbackUpdateWithWhereUniqueWithoutUserInput | AICategorFeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AICategorFeedbackUpdateManyWithWhereWithoutUserInput | AICategorFeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AICategorFeedbackScalarWhereInput | AICategorFeedbackScalarWhereInput[]
  }

  export type CollectionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CollectionCreateWithoutUserInput, CollectionUncheckedCreateWithoutUserInput> | CollectionCreateWithoutUserInput[] | CollectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutUserInput | CollectionCreateOrConnectWithoutUserInput[]
    upsert?: CollectionUpsertWithWhereUniqueWithoutUserInput | CollectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CollectionCreateManyUserInputEnvelope
    set?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    disconnect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    delete?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    update?: CollectionUpdateWithWhereUniqueWithoutUserInput | CollectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CollectionUpdateManyWithWhereWithoutUserInput | CollectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
  }

  export type BattleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BattleCreateWithoutUserInput, BattleUncheckedCreateWithoutUserInput> | BattleCreateWithoutUserInput[] | BattleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BattleCreateOrConnectWithoutUserInput | BattleCreateOrConnectWithoutUserInput[]
    upsert?: BattleUpsertWithWhereUniqueWithoutUserInput | BattleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BattleCreateManyUserInputEnvelope
    set?: BattleWhereUniqueInput | BattleWhereUniqueInput[]
    disconnect?: BattleWhereUniqueInput | BattleWhereUniqueInput[]
    delete?: BattleWhereUniqueInput | BattleWhereUniqueInput[]
    connect?: BattleWhereUniqueInput | BattleWhereUniqueInput[]
    update?: BattleUpdateWithWhereUniqueWithoutUserInput | BattleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BattleUpdateManyWithWhereWithoutUserInput | BattleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BattleScalarWhereInput | BattleScalarWhereInput[]
  }

  export type AICategorFeedbackUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AICategorFeedbackCreateWithoutUserInput, AICategorFeedbackUncheckedCreateWithoutUserInput> | AICategorFeedbackCreateWithoutUserInput[] | AICategorFeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AICategorFeedbackCreateOrConnectWithoutUserInput | AICategorFeedbackCreateOrConnectWithoutUserInput[]
    upsert?: AICategorFeedbackUpsertWithWhereUniqueWithoutUserInput | AICategorFeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AICategorFeedbackCreateManyUserInputEnvelope
    set?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
    disconnect?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
    delete?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
    connect?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
    update?: AICategorFeedbackUpdateWithWhereUniqueWithoutUserInput | AICategorFeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AICategorFeedbackUpdateManyWithWhereWithoutUserInput | AICategorFeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AICategorFeedbackScalarWhereInput | AICategorFeedbackScalarWhereInput[]
  }

  export type FragranceCreatetopNotesInput = {
    set: string[]
  }

  export type FragranceCreatemiddleNotesInput = {
    set: string[]
  }

  export type FragranceCreatebaseNotesInput = {
    set: string[]
  }

  export type FragranceCreateaiSeasonsInput = {
    set: string[]
  }

  export type FragranceCreateaiOccasionsInput = {
    set: string[]
  }

  export type FragranceCreateaiMoodsInput = {
    set: string[]
  }

  export type FragranceCreatefragranticaSeasonsInput = {
    set: string[]
  }

  export type CollectionItemCreateNestedManyWithoutFragranceInput = {
    create?: XOR<CollectionItemCreateWithoutFragranceInput, CollectionItemUncheckedCreateWithoutFragranceInput> | CollectionItemCreateWithoutFragranceInput[] | CollectionItemUncheckedCreateWithoutFragranceInput[]
    connectOrCreate?: CollectionItemCreateOrConnectWithoutFragranceInput | CollectionItemCreateOrConnectWithoutFragranceInput[]
    createMany?: CollectionItemCreateManyFragranceInputEnvelope
    connect?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
  }

  export type BattleItemCreateNestedManyWithoutFragranceInput = {
    create?: XOR<BattleItemCreateWithoutFragranceInput, BattleItemUncheckedCreateWithoutFragranceInput> | BattleItemCreateWithoutFragranceInput[] | BattleItemUncheckedCreateWithoutFragranceInput[]
    connectOrCreate?: BattleItemCreateOrConnectWithoutFragranceInput | BattleItemCreateOrConnectWithoutFragranceInput[]
    createMany?: BattleItemCreateManyFragranceInputEnvelope
    connect?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
  }

  export type AICategorFeedbackCreateNestedManyWithoutFragranceInput = {
    create?: XOR<AICategorFeedbackCreateWithoutFragranceInput, AICategorFeedbackUncheckedCreateWithoutFragranceInput> | AICategorFeedbackCreateWithoutFragranceInput[] | AICategorFeedbackUncheckedCreateWithoutFragranceInput[]
    connectOrCreate?: AICategorFeedbackCreateOrConnectWithoutFragranceInput | AICategorFeedbackCreateOrConnectWithoutFragranceInput[]
    createMany?: AICategorFeedbackCreateManyFragranceInputEnvelope
    connect?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
  }

  export type CollectionItemUncheckedCreateNestedManyWithoutFragranceInput = {
    create?: XOR<CollectionItemCreateWithoutFragranceInput, CollectionItemUncheckedCreateWithoutFragranceInput> | CollectionItemCreateWithoutFragranceInput[] | CollectionItemUncheckedCreateWithoutFragranceInput[]
    connectOrCreate?: CollectionItemCreateOrConnectWithoutFragranceInput | CollectionItemCreateOrConnectWithoutFragranceInput[]
    createMany?: CollectionItemCreateManyFragranceInputEnvelope
    connect?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
  }

  export type BattleItemUncheckedCreateNestedManyWithoutFragranceInput = {
    create?: XOR<BattleItemCreateWithoutFragranceInput, BattleItemUncheckedCreateWithoutFragranceInput> | BattleItemCreateWithoutFragranceInput[] | BattleItemUncheckedCreateWithoutFragranceInput[]
    connectOrCreate?: BattleItemCreateOrConnectWithoutFragranceInput | BattleItemCreateOrConnectWithoutFragranceInput[]
    createMany?: BattleItemCreateManyFragranceInputEnvelope
    connect?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
  }

  export type AICategorFeedbackUncheckedCreateNestedManyWithoutFragranceInput = {
    create?: XOR<AICategorFeedbackCreateWithoutFragranceInput, AICategorFeedbackUncheckedCreateWithoutFragranceInput> | AICategorFeedbackCreateWithoutFragranceInput[] | AICategorFeedbackUncheckedCreateWithoutFragranceInput[]
    connectOrCreate?: AICategorFeedbackCreateOrConnectWithoutFragranceInput | AICategorFeedbackCreateOrConnectWithoutFragranceInput[]
    createMany?: AICategorFeedbackCreateManyFragranceInputEnvelope
    connect?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FragranceUpdatetopNotesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type FragranceUpdatemiddleNotesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type FragranceUpdatebaseNotesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type FragranceUpdateaiSeasonsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type FragranceUpdateaiOccasionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type FragranceUpdateaiMoodsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type FragranceUpdatefragranticaSeasonsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CollectionItemUpdateManyWithoutFragranceNestedInput = {
    create?: XOR<CollectionItemCreateWithoutFragranceInput, CollectionItemUncheckedCreateWithoutFragranceInput> | CollectionItemCreateWithoutFragranceInput[] | CollectionItemUncheckedCreateWithoutFragranceInput[]
    connectOrCreate?: CollectionItemCreateOrConnectWithoutFragranceInput | CollectionItemCreateOrConnectWithoutFragranceInput[]
    upsert?: CollectionItemUpsertWithWhereUniqueWithoutFragranceInput | CollectionItemUpsertWithWhereUniqueWithoutFragranceInput[]
    createMany?: CollectionItemCreateManyFragranceInputEnvelope
    set?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
    disconnect?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
    delete?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
    connect?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
    update?: CollectionItemUpdateWithWhereUniqueWithoutFragranceInput | CollectionItemUpdateWithWhereUniqueWithoutFragranceInput[]
    updateMany?: CollectionItemUpdateManyWithWhereWithoutFragranceInput | CollectionItemUpdateManyWithWhereWithoutFragranceInput[]
    deleteMany?: CollectionItemScalarWhereInput | CollectionItemScalarWhereInput[]
  }

  export type BattleItemUpdateManyWithoutFragranceNestedInput = {
    create?: XOR<BattleItemCreateWithoutFragranceInput, BattleItemUncheckedCreateWithoutFragranceInput> | BattleItemCreateWithoutFragranceInput[] | BattleItemUncheckedCreateWithoutFragranceInput[]
    connectOrCreate?: BattleItemCreateOrConnectWithoutFragranceInput | BattleItemCreateOrConnectWithoutFragranceInput[]
    upsert?: BattleItemUpsertWithWhereUniqueWithoutFragranceInput | BattleItemUpsertWithWhereUniqueWithoutFragranceInput[]
    createMany?: BattleItemCreateManyFragranceInputEnvelope
    set?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
    disconnect?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
    delete?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
    connect?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
    update?: BattleItemUpdateWithWhereUniqueWithoutFragranceInput | BattleItemUpdateWithWhereUniqueWithoutFragranceInput[]
    updateMany?: BattleItemUpdateManyWithWhereWithoutFragranceInput | BattleItemUpdateManyWithWhereWithoutFragranceInput[]
    deleteMany?: BattleItemScalarWhereInput | BattleItemScalarWhereInput[]
  }

  export type AICategorFeedbackUpdateManyWithoutFragranceNestedInput = {
    create?: XOR<AICategorFeedbackCreateWithoutFragranceInput, AICategorFeedbackUncheckedCreateWithoutFragranceInput> | AICategorFeedbackCreateWithoutFragranceInput[] | AICategorFeedbackUncheckedCreateWithoutFragranceInput[]
    connectOrCreate?: AICategorFeedbackCreateOrConnectWithoutFragranceInput | AICategorFeedbackCreateOrConnectWithoutFragranceInput[]
    upsert?: AICategorFeedbackUpsertWithWhereUniqueWithoutFragranceInput | AICategorFeedbackUpsertWithWhereUniqueWithoutFragranceInput[]
    createMany?: AICategorFeedbackCreateManyFragranceInputEnvelope
    set?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
    disconnect?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
    delete?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
    connect?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
    update?: AICategorFeedbackUpdateWithWhereUniqueWithoutFragranceInput | AICategorFeedbackUpdateWithWhereUniqueWithoutFragranceInput[]
    updateMany?: AICategorFeedbackUpdateManyWithWhereWithoutFragranceInput | AICategorFeedbackUpdateManyWithWhereWithoutFragranceInput[]
    deleteMany?: AICategorFeedbackScalarWhereInput | AICategorFeedbackScalarWhereInput[]
  }

  export type CollectionItemUncheckedUpdateManyWithoutFragranceNestedInput = {
    create?: XOR<CollectionItemCreateWithoutFragranceInput, CollectionItemUncheckedCreateWithoutFragranceInput> | CollectionItemCreateWithoutFragranceInput[] | CollectionItemUncheckedCreateWithoutFragranceInput[]
    connectOrCreate?: CollectionItemCreateOrConnectWithoutFragranceInput | CollectionItemCreateOrConnectWithoutFragranceInput[]
    upsert?: CollectionItemUpsertWithWhereUniqueWithoutFragranceInput | CollectionItemUpsertWithWhereUniqueWithoutFragranceInput[]
    createMany?: CollectionItemCreateManyFragranceInputEnvelope
    set?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
    disconnect?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
    delete?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
    connect?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
    update?: CollectionItemUpdateWithWhereUniqueWithoutFragranceInput | CollectionItemUpdateWithWhereUniqueWithoutFragranceInput[]
    updateMany?: CollectionItemUpdateManyWithWhereWithoutFragranceInput | CollectionItemUpdateManyWithWhereWithoutFragranceInput[]
    deleteMany?: CollectionItemScalarWhereInput | CollectionItemScalarWhereInput[]
  }

  export type BattleItemUncheckedUpdateManyWithoutFragranceNestedInput = {
    create?: XOR<BattleItemCreateWithoutFragranceInput, BattleItemUncheckedCreateWithoutFragranceInput> | BattleItemCreateWithoutFragranceInput[] | BattleItemUncheckedCreateWithoutFragranceInput[]
    connectOrCreate?: BattleItemCreateOrConnectWithoutFragranceInput | BattleItemCreateOrConnectWithoutFragranceInput[]
    upsert?: BattleItemUpsertWithWhereUniqueWithoutFragranceInput | BattleItemUpsertWithWhereUniqueWithoutFragranceInput[]
    createMany?: BattleItemCreateManyFragranceInputEnvelope
    set?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
    disconnect?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
    delete?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
    connect?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
    update?: BattleItemUpdateWithWhereUniqueWithoutFragranceInput | BattleItemUpdateWithWhereUniqueWithoutFragranceInput[]
    updateMany?: BattleItemUpdateManyWithWhereWithoutFragranceInput | BattleItemUpdateManyWithWhereWithoutFragranceInput[]
    deleteMany?: BattleItemScalarWhereInput | BattleItemScalarWhereInput[]
  }

  export type AICategorFeedbackUncheckedUpdateManyWithoutFragranceNestedInput = {
    create?: XOR<AICategorFeedbackCreateWithoutFragranceInput, AICategorFeedbackUncheckedCreateWithoutFragranceInput> | AICategorFeedbackCreateWithoutFragranceInput[] | AICategorFeedbackUncheckedCreateWithoutFragranceInput[]
    connectOrCreate?: AICategorFeedbackCreateOrConnectWithoutFragranceInput | AICategorFeedbackCreateOrConnectWithoutFragranceInput[]
    upsert?: AICategorFeedbackUpsertWithWhereUniqueWithoutFragranceInput | AICategorFeedbackUpsertWithWhereUniqueWithoutFragranceInput[]
    createMany?: AICategorFeedbackCreateManyFragranceInputEnvelope
    set?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
    disconnect?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
    delete?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
    connect?: AICategorFeedbackWhereUniqueInput | AICategorFeedbackWhereUniqueInput[]
    update?: AICategorFeedbackUpdateWithWhereUniqueWithoutFragranceInput | AICategorFeedbackUpdateWithWhereUniqueWithoutFragranceInput[]
    updateMany?: AICategorFeedbackUpdateManyWithWhereWithoutFragranceInput | AICategorFeedbackUpdateManyWithWhereWithoutFragranceInput[]
    deleteMany?: AICategorFeedbackScalarWhereInput | AICategorFeedbackScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCollectionsInput = {
    create?: XOR<UserCreateWithoutCollectionsInput, UserUncheckedCreateWithoutCollectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCollectionsInput
    connect?: UserWhereUniqueInput
  }

  export type CollectionItemCreateNestedManyWithoutCollectionInput = {
    create?: XOR<CollectionItemCreateWithoutCollectionInput, CollectionItemUncheckedCreateWithoutCollectionInput> | CollectionItemCreateWithoutCollectionInput[] | CollectionItemUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: CollectionItemCreateOrConnectWithoutCollectionInput | CollectionItemCreateOrConnectWithoutCollectionInput[]
    createMany?: CollectionItemCreateManyCollectionInputEnvelope
    connect?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
  }

  export type CollectionItemUncheckedCreateNestedManyWithoutCollectionInput = {
    create?: XOR<CollectionItemCreateWithoutCollectionInput, CollectionItemUncheckedCreateWithoutCollectionInput> | CollectionItemCreateWithoutCollectionInput[] | CollectionItemUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: CollectionItemCreateOrConnectWithoutCollectionInput | CollectionItemCreateOrConnectWithoutCollectionInput[]
    createMany?: CollectionItemCreateManyCollectionInputEnvelope
    connect?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCollectionsNestedInput = {
    create?: XOR<UserCreateWithoutCollectionsInput, UserUncheckedCreateWithoutCollectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCollectionsInput
    upsert?: UserUpsertWithoutCollectionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCollectionsInput, UserUpdateWithoutCollectionsInput>, UserUncheckedUpdateWithoutCollectionsInput>
  }

  export type CollectionItemUpdateManyWithoutCollectionNestedInput = {
    create?: XOR<CollectionItemCreateWithoutCollectionInput, CollectionItemUncheckedCreateWithoutCollectionInput> | CollectionItemCreateWithoutCollectionInput[] | CollectionItemUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: CollectionItemCreateOrConnectWithoutCollectionInput | CollectionItemCreateOrConnectWithoutCollectionInput[]
    upsert?: CollectionItemUpsertWithWhereUniqueWithoutCollectionInput | CollectionItemUpsertWithWhereUniqueWithoutCollectionInput[]
    createMany?: CollectionItemCreateManyCollectionInputEnvelope
    set?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
    disconnect?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
    delete?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
    connect?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
    update?: CollectionItemUpdateWithWhereUniqueWithoutCollectionInput | CollectionItemUpdateWithWhereUniqueWithoutCollectionInput[]
    updateMany?: CollectionItemUpdateManyWithWhereWithoutCollectionInput | CollectionItemUpdateManyWithWhereWithoutCollectionInput[]
    deleteMany?: CollectionItemScalarWhereInput | CollectionItemScalarWhereInput[]
  }

  export type CollectionItemUncheckedUpdateManyWithoutCollectionNestedInput = {
    create?: XOR<CollectionItemCreateWithoutCollectionInput, CollectionItemUncheckedCreateWithoutCollectionInput> | CollectionItemCreateWithoutCollectionInput[] | CollectionItemUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: CollectionItemCreateOrConnectWithoutCollectionInput | CollectionItemCreateOrConnectWithoutCollectionInput[]
    upsert?: CollectionItemUpsertWithWhereUniqueWithoutCollectionInput | CollectionItemUpsertWithWhereUniqueWithoutCollectionInput[]
    createMany?: CollectionItemCreateManyCollectionInputEnvelope
    set?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
    disconnect?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
    delete?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
    connect?: CollectionItemWhereUniqueInput | CollectionItemWhereUniqueInput[]
    update?: CollectionItemUpdateWithWhereUniqueWithoutCollectionInput | CollectionItemUpdateWithWhereUniqueWithoutCollectionInput[]
    updateMany?: CollectionItemUpdateManyWithWhereWithoutCollectionInput | CollectionItemUpdateManyWithWhereWithoutCollectionInput[]
    deleteMany?: CollectionItemScalarWhereInput | CollectionItemScalarWhereInput[]
  }

  export type CollectionCreateNestedOneWithoutItemsInput = {
    create?: XOR<CollectionCreateWithoutItemsInput, CollectionUncheckedCreateWithoutItemsInput>
    connectOrCreate?: CollectionCreateOrConnectWithoutItemsInput
    connect?: CollectionWhereUniqueInput
  }

  export type FragranceCreateNestedOneWithoutCollectionsInput = {
    create?: XOR<FragranceCreateWithoutCollectionsInput, FragranceUncheckedCreateWithoutCollectionsInput>
    connectOrCreate?: FragranceCreateOrConnectWithoutCollectionsInput
    connect?: FragranceWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CollectionUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<CollectionCreateWithoutItemsInput, CollectionUncheckedCreateWithoutItemsInput>
    connectOrCreate?: CollectionCreateOrConnectWithoutItemsInput
    upsert?: CollectionUpsertWithoutItemsInput
    connect?: CollectionWhereUniqueInput
    update?: XOR<XOR<CollectionUpdateToOneWithWhereWithoutItemsInput, CollectionUpdateWithoutItemsInput>, CollectionUncheckedUpdateWithoutItemsInput>
  }

  export type FragranceUpdateOneRequiredWithoutCollectionsNestedInput = {
    create?: XOR<FragranceCreateWithoutCollectionsInput, FragranceUncheckedCreateWithoutCollectionsInput>
    connectOrCreate?: FragranceCreateOrConnectWithoutCollectionsInput
    upsert?: FragranceUpsertWithoutCollectionsInput
    connect?: FragranceWhereUniqueInput
    update?: XOR<XOR<FragranceUpdateToOneWithWhereWithoutCollectionsInput, FragranceUpdateWithoutCollectionsInput>, FragranceUncheckedUpdateWithoutCollectionsInput>
  }

  export type UserCreateNestedOneWithoutBattlesInput = {
    create?: XOR<UserCreateWithoutBattlesInput, UserUncheckedCreateWithoutBattlesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBattlesInput
    connect?: UserWhereUniqueInput
  }

  export type BattleItemCreateNestedManyWithoutBattleInput = {
    create?: XOR<BattleItemCreateWithoutBattleInput, BattleItemUncheckedCreateWithoutBattleInput> | BattleItemCreateWithoutBattleInput[] | BattleItemUncheckedCreateWithoutBattleInput[]
    connectOrCreate?: BattleItemCreateOrConnectWithoutBattleInput | BattleItemCreateOrConnectWithoutBattleInput[]
    createMany?: BattleItemCreateManyBattleInputEnvelope
    connect?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
  }

  export type BattleItemUncheckedCreateNestedManyWithoutBattleInput = {
    create?: XOR<BattleItemCreateWithoutBattleInput, BattleItemUncheckedCreateWithoutBattleInput> | BattleItemCreateWithoutBattleInput[] | BattleItemUncheckedCreateWithoutBattleInput[]
    connectOrCreate?: BattleItemCreateOrConnectWithoutBattleInput | BattleItemCreateOrConnectWithoutBattleInput[]
    createMany?: BattleItemCreateManyBattleInputEnvelope
    connect?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
  }

  export type EnumBattleStatusFieldUpdateOperationsInput = {
    set?: $Enums.BattleStatus
  }

  export type UserUpdateOneRequiredWithoutBattlesNestedInput = {
    create?: XOR<UserCreateWithoutBattlesInput, UserUncheckedCreateWithoutBattlesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBattlesInput
    upsert?: UserUpsertWithoutBattlesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBattlesInput, UserUpdateWithoutBattlesInput>, UserUncheckedUpdateWithoutBattlesInput>
  }

  export type BattleItemUpdateManyWithoutBattleNestedInput = {
    create?: XOR<BattleItemCreateWithoutBattleInput, BattleItemUncheckedCreateWithoutBattleInput> | BattleItemCreateWithoutBattleInput[] | BattleItemUncheckedCreateWithoutBattleInput[]
    connectOrCreate?: BattleItemCreateOrConnectWithoutBattleInput | BattleItemCreateOrConnectWithoutBattleInput[]
    upsert?: BattleItemUpsertWithWhereUniqueWithoutBattleInput | BattleItemUpsertWithWhereUniqueWithoutBattleInput[]
    createMany?: BattleItemCreateManyBattleInputEnvelope
    set?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
    disconnect?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
    delete?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
    connect?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
    update?: BattleItemUpdateWithWhereUniqueWithoutBattleInput | BattleItemUpdateWithWhereUniqueWithoutBattleInput[]
    updateMany?: BattleItemUpdateManyWithWhereWithoutBattleInput | BattleItemUpdateManyWithWhereWithoutBattleInput[]
    deleteMany?: BattleItemScalarWhereInput | BattleItemScalarWhereInput[]
  }

  export type BattleItemUncheckedUpdateManyWithoutBattleNestedInput = {
    create?: XOR<BattleItemCreateWithoutBattleInput, BattleItemUncheckedCreateWithoutBattleInput> | BattleItemCreateWithoutBattleInput[] | BattleItemUncheckedCreateWithoutBattleInput[]
    connectOrCreate?: BattleItemCreateOrConnectWithoutBattleInput | BattleItemCreateOrConnectWithoutBattleInput[]
    upsert?: BattleItemUpsertWithWhereUniqueWithoutBattleInput | BattleItemUpsertWithWhereUniqueWithoutBattleInput[]
    createMany?: BattleItemCreateManyBattleInputEnvelope
    set?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
    disconnect?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
    delete?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
    connect?: BattleItemWhereUniqueInput | BattleItemWhereUniqueInput[]
    update?: BattleItemUpdateWithWhereUniqueWithoutBattleInput | BattleItemUpdateWithWhereUniqueWithoutBattleInput[]
    updateMany?: BattleItemUpdateManyWithWhereWithoutBattleInput | BattleItemUpdateManyWithWhereWithoutBattleInput[]
    deleteMany?: BattleItemScalarWhereInput | BattleItemScalarWhereInput[]
  }

  export type BattleCreateNestedOneWithoutItemsInput = {
    create?: XOR<BattleCreateWithoutItemsInput, BattleUncheckedCreateWithoutItemsInput>
    connectOrCreate?: BattleCreateOrConnectWithoutItemsInput
    connect?: BattleWhereUniqueInput
  }

  export type FragranceCreateNestedOneWithoutBattleItemsInput = {
    create?: XOR<FragranceCreateWithoutBattleItemsInput, FragranceUncheckedCreateWithoutBattleItemsInput>
    connectOrCreate?: FragranceCreateOrConnectWithoutBattleItemsInput
    connect?: FragranceWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BattleUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<BattleCreateWithoutItemsInput, BattleUncheckedCreateWithoutItemsInput>
    connectOrCreate?: BattleCreateOrConnectWithoutItemsInput
    upsert?: BattleUpsertWithoutItemsInput
    connect?: BattleWhereUniqueInput
    update?: XOR<XOR<BattleUpdateToOneWithWhereWithoutItemsInput, BattleUpdateWithoutItemsInput>, BattleUncheckedUpdateWithoutItemsInput>
  }

  export type FragranceUpdateOneRequiredWithoutBattleItemsNestedInput = {
    create?: XOR<FragranceCreateWithoutBattleItemsInput, FragranceUncheckedCreateWithoutBattleItemsInput>
    connectOrCreate?: FragranceCreateOrConnectWithoutBattleItemsInput
    upsert?: FragranceUpsertWithoutBattleItemsInput
    connect?: FragranceWhereUniqueInput
    update?: XOR<XOR<FragranceUpdateToOneWithWhereWithoutBattleItemsInput, FragranceUpdateWithoutBattleItemsInput>, FragranceUncheckedUpdateWithoutBattleItemsInput>
  }

  export type UserCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
  }

  export type FragranceCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<FragranceCreateWithoutFeedbacksInput, FragranceUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: FragranceCreateOrConnectWithoutFeedbacksInput
    connect?: FragranceWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    upsert?: UserUpsertWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedbacksInput, UserUpdateWithoutFeedbacksInput>, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type FragranceUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<FragranceCreateWithoutFeedbacksInput, FragranceUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: FragranceCreateOrConnectWithoutFeedbacksInput
    upsert?: FragranceUpsertWithoutFeedbacksInput
    connect?: FragranceWhereUniqueInput
    update?: XOR<XOR<FragranceUpdateToOneWithWhereWithoutFeedbacksInput, FragranceUpdateWithoutFeedbacksInput>, FragranceUncheckedUpdateWithoutFeedbacksInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumBattleStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BattleStatus | EnumBattleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BattleStatus[] | ListEnumBattleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BattleStatus[] | ListEnumBattleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBattleStatusFilter<$PrismaModel> | $Enums.BattleStatus
  }

  export type NestedEnumBattleStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BattleStatus | EnumBattleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BattleStatus[] | ListEnumBattleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BattleStatus[] | ListEnumBattleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBattleStatusWithAggregatesFilter<$PrismaModel> | $Enums.BattleStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBattleStatusFilter<$PrismaModel>
    _max?: NestedEnumBattleStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CollectionCreateWithoutUserInput = {
    id?: string
    name?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: CollectionItemCreateNestedManyWithoutCollectionInput
  }

  export type CollectionUncheckedCreateWithoutUserInput = {
    id?: string
    name?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: CollectionItemUncheckedCreateNestedManyWithoutCollectionInput
  }

  export type CollectionCreateOrConnectWithoutUserInput = {
    where: CollectionWhereUniqueInput
    create: XOR<CollectionCreateWithoutUserInput, CollectionUncheckedCreateWithoutUserInput>
  }

  export type CollectionCreateManyUserInputEnvelope = {
    data: CollectionCreateManyUserInput | CollectionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BattleCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.BattleStatus
    createdAt?: Date | string
    completedAt?: Date | string | null
    items?: BattleItemCreateNestedManyWithoutBattleInput
  }

  export type BattleUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.BattleStatus
    createdAt?: Date | string
    completedAt?: Date | string | null
    items?: BattleItemUncheckedCreateNestedManyWithoutBattleInput
  }

  export type BattleCreateOrConnectWithoutUserInput = {
    where: BattleWhereUniqueInput
    create: XOR<BattleCreateWithoutUserInput, BattleUncheckedCreateWithoutUserInput>
  }

  export type BattleCreateManyUserInputEnvelope = {
    data: BattleCreateManyUserInput | BattleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AICategorFeedbackCreateWithoutUserInput = {
    id?: string
    aiSuggestion: JsonNullValueInput | InputJsonValue
    userCorrection: JsonNullValueInput | InputJsonValue
    feedbackType: string
    createdAt?: Date | string
    fragrance: FragranceCreateNestedOneWithoutFeedbacksInput
  }

  export type AICategorFeedbackUncheckedCreateWithoutUserInput = {
    id?: string
    fragranceId: string
    aiSuggestion: JsonNullValueInput | InputJsonValue
    userCorrection: JsonNullValueInput | InputJsonValue
    feedbackType: string
    createdAt?: Date | string
  }

  export type AICategorFeedbackCreateOrConnectWithoutUserInput = {
    where: AICategorFeedbackWhereUniqueInput
    create: XOR<AICategorFeedbackCreateWithoutUserInput, AICategorFeedbackUncheckedCreateWithoutUserInput>
  }

  export type AICategorFeedbackCreateManyUserInputEnvelope = {
    data: AICategorFeedbackCreateManyUserInput | AICategorFeedbackCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CollectionUpsertWithWhereUniqueWithoutUserInput = {
    where: CollectionWhereUniqueInput
    update: XOR<CollectionUpdateWithoutUserInput, CollectionUncheckedUpdateWithoutUserInput>
    create: XOR<CollectionCreateWithoutUserInput, CollectionUncheckedCreateWithoutUserInput>
  }

  export type CollectionUpdateWithWhereUniqueWithoutUserInput = {
    where: CollectionWhereUniqueInput
    data: XOR<CollectionUpdateWithoutUserInput, CollectionUncheckedUpdateWithoutUserInput>
  }

  export type CollectionUpdateManyWithWhereWithoutUserInput = {
    where: CollectionScalarWhereInput
    data: XOR<CollectionUpdateManyMutationInput, CollectionUncheckedUpdateManyWithoutUserInput>
  }

  export type CollectionScalarWhereInput = {
    AND?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
    OR?: CollectionScalarWhereInput[]
    NOT?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
    id?: StringFilter<"Collection"> | string
    userId?: StringFilter<"Collection"> | string
    name?: StringFilter<"Collection"> | string
    description?: StringNullableFilter<"Collection"> | string | null
    createdAt?: DateTimeFilter<"Collection"> | Date | string
    updatedAt?: DateTimeFilter<"Collection"> | Date | string
  }

  export type BattleUpsertWithWhereUniqueWithoutUserInput = {
    where: BattleWhereUniqueInput
    update: XOR<BattleUpdateWithoutUserInput, BattleUncheckedUpdateWithoutUserInput>
    create: XOR<BattleCreateWithoutUserInput, BattleUncheckedCreateWithoutUserInput>
  }

  export type BattleUpdateWithWhereUniqueWithoutUserInput = {
    where: BattleWhereUniqueInput
    data: XOR<BattleUpdateWithoutUserInput, BattleUncheckedUpdateWithoutUserInput>
  }

  export type BattleUpdateManyWithWhereWithoutUserInput = {
    where: BattleScalarWhereInput
    data: XOR<BattleUpdateManyMutationInput, BattleUncheckedUpdateManyWithoutUserInput>
  }

  export type BattleScalarWhereInput = {
    AND?: BattleScalarWhereInput | BattleScalarWhereInput[]
    OR?: BattleScalarWhereInput[]
    NOT?: BattleScalarWhereInput | BattleScalarWhereInput[]
    id?: StringFilter<"Battle"> | string
    userId?: StringFilter<"Battle"> | string
    title?: StringFilter<"Battle"> | string
    description?: StringNullableFilter<"Battle"> | string | null
    status?: EnumBattleStatusFilter<"Battle"> | $Enums.BattleStatus
    createdAt?: DateTimeFilter<"Battle"> | Date | string
    completedAt?: DateTimeNullableFilter<"Battle"> | Date | string | null
  }

  export type AICategorFeedbackUpsertWithWhereUniqueWithoutUserInput = {
    where: AICategorFeedbackWhereUniqueInput
    update: XOR<AICategorFeedbackUpdateWithoutUserInput, AICategorFeedbackUncheckedUpdateWithoutUserInput>
    create: XOR<AICategorFeedbackCreateWithoutUserInput, AICategorFeedbackUncheckedCreateWithoutUserInput>
  }

  export type AICategorFeedbackUpdateWithWhereUniqueWithoutUserInput = {
    where: AICategorFeedbackWhereUniqueInput
    data: XOR<AICategorFeedbackUpdateWithoutUserInput, AICategorFeedbackUncheckedUpdateWithoutUserInput>
  }

  export type AICategorFeedbackUpdateManyWithWhereWithoutUserInput = {
    where: AICategorFeedbackScalarWhereInput
    data: XOR<AICategorFeedbackUpdateManyMutationInput, AICategorFeedbackUncheckedUpdateManyWithoutUserInput>
  }

  export type AICategorFeedbackScalarWhereInput = {
    AND?: AICategorFeedbackScalarWhereInput | AICategorFeedbackScalarWhereInput[]
    OR?: AICategorFeedbackScalarWhereInput[]
    NOT?: AICategorFeedbackScalarWhereInput | AICategorFeedbackScalarWhereInput[]
    id?: StringFilter<"AICategorFeedback"> | string
    userId?: StringFilter<"AICategorFeedback"> | string
    fragranceId?: StringFilter<"AICategorFeedback"> | string
    aiSuggestion?: JsonFilter<"AICategorFeedback">
    userCorrection?: JsonFilter<"AICategorFeedback">
    feedbackType?: StringFilter<"AICategorFeedback"> | string
    createdAt?: DateTimeFilter<"AICategorFeedback"> | Date | string
  }

  export type CollectionItemCreateWithoutFragranceInput = {
    id?: string
    personalRating?: number | null
    personalNotes?: string | null
    purchaseDate?: Date | string | null
    bottleSize?: string | null
    createdAt?: Date | string
    collection: CollectionCreateNestedOneWithoutItemsInput
  }

  export type CollectionItemUncheckedCreateWithoutFragranceInput = {
    id?: string
    collectionId: string
    personalRating?: number | null
    personalNotes?: string | null
    purchaseDate?: Date | string | null
    bottleSize?: string | null
    createdAt?: Date | string
  }

  export type CollectionItemCreateOrConnectWithoutFragranceInput = {
    where: CollectionItemWhereUniqueInput
    create: XOR<CollectionItemCreateWithoutFragranceInput, CollectionItemUncheckedCreateWithoutFragranceInput>
  }

  export type CollectionItemCreateManyFragranceInputEnvelope = {
    data: CollectionItemCreateManyFragranceInput | CollectionItemCreateManyFragranceInput[]
    skipDuplicates?: boolean
  }

  export type BattleItemCreateWithoutFragranceInput = {
    id?: string
    position: number
    votes?: number
    winner?: boolean
    battle: BattleCreateNestedOneWithoutItemsInput
  }

  export type BattleItemUncheckedCreateWithoutFragranceInput = {
    id?: string
    battleId: string
    position: number
    votes?: number
    winner?: boolean
  }

  export type BattleItemCreateOrConnectWithoutFragranceInput = {
    where: BattleItemWhereUniqueInput
    create: XOR<BattleItemCreateWithoutFragranceInput, BattleItemUncheckedCreateWithoutFragranceInput>
  }

  export type BattleItemCreateManyFragranceInputEnvelope = {
    data: BattleItemCreateManyFragranceInput | BattleItemCreateManyFragranceInput[]
    skipDuplicates?: boolean
  }

  export type AICategorFeedbackCreateWithoutFragranceInput = {
    id?: string
    aiSuggestion: JsonNullValueInput | InputJsonValue
    userCorrection: JsonNullValueInput | InputJsonValue
    feedbackType: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFeedbacksInput
  }

  export type AICategorFeedbackUncheckedCreateWithoutFragranceInput = {
    id?: string
    userId: string
    aiSuggestion: JsonNullValueInput | InputJsonValue
    userCorrection: JsonNullValueInput | InputJsonValue
    feedbackType: string
    createdAt?: Date | string
  }

  export type AICategorFeedbackCreateOrConnectWithoutFragranceInput = {
    where: AICategorFeedbackWhereUniqueInput
    create: XOR<AICategorFeedbackCreateWithoutFragranceInput, AICategorFeedbackUncheckedCreateWithoutFragranceInput>
  }

  export type AICategorFeedbackCreateManyFragranceInputEnvelope = {
    data: AICategorFeedbackCreateManyFragranceInput | AICategorFeedbackCreateManyFragranceInput[]
    skipDuplicates?: boolean
  }

  export type CollectionItemUpsertWithWhereUniqueWithoutFragranceInput = {
    where: CollectionItemWhereUniqueInput
    update: XOR<CollectionItemUpdateWithoutFragranceInput, CollectionItemUncheckedUpdateWithoutFragranceInput>
    create: XOR<CollectionItemCreateWithoutFragranceInput, CollectionItemUncheckedCreateWithoutFragranceInput>
  }

  export type CollectionItemUpdateWithWhereUniqueWithoutFragranceInput = {
    where: CollectionItemWhereUniqueInput
    data: XOR<CollectionItemUpdateWithoutFragranceInput, CollectionItemUncheckedUpdateWithoutFragranceInput>
  }

  export type CollectionItemUpdateManyWithWhereWithoutFragranceInput = {
    where: CollectionItemScalarWhereInput
    data: XOR<CollectionItemUpdateManyMutationInput, CollectionItemUncheckedUpdateManyWithoutFragranceInput>
  }

  export type CollectionItemScalarWhereInput = {
    AND?: CollectionItemScalarWhereInput | CollectionItemScalarWhereInput[]
    OR?: CollectionItemScalarWhereInput[]
    NOT?: CollectionItemScalarWhereInput | CollectionItemScalarWhereInput[]
    id?: StringFilter<"CollectionItem"> | string
    collectionId?: StringFilter<"CollectionItem"> | string
    fragranceId?: StringFilter<"CollectionItem"> | string
    personalRating?: IntNullableFilter<"CollectionItem"> | number | null
    personalNotes?: StringNullableFilter<"CollectionItem"> | string | null
    purchaseDate?: DateTimeNullableFilter<"CollectionItem"> | Date | string | null
    bottleSize?: StringNullableFilter<"CollectionItem"> | string | null
    createdAt?: DateTimeFilter<"CollectionItem"> | Date | string
  }

  export type BattleItemUpsertWithWhereUniqueWithoutFragranceInput = {
    where: BattleItemWhereUniqueInput
    update: XOR<BattleItemUpdateWithoutFragranceInput, BattleItemUncheckedUpdateWithoutFragranceInput>
    create: XOR<BattleItemCreateWithoutFragranceInput, BattleItemUncheckedCreateWithoutFragranceInput>
  }

  export type BattleItemUpdateWithWhereUniqueWithoutFragranceInput = {
    where: BattleItemWhereUniqueInput
    data: XOR<BattleItemUpdateWithoutFragranceInput, BattleItemUncheckedUpdateWithoutFragranceInput>
  }

  export type BattleItemUpdateManyWithWhereWithoutFragranceInput = {
    where: BattleItemScalarWhereInput
    data: XOR<BattleItemUpdateManyMutationInput, BattleItemUncheckedUpdateManyWithoutFragranceInput>
  }

  export type BattleItemScalarWhereInput = {
    AND?: BattleItemScalarWhereInput | BattleItemScalarWhereInput[]
    OR?: BattleItemScalarWhereInput[]
    NOT?: BattleItemScalarWhereInput | BattleItemScalarWhereInput[]
    id?: StringFilter<"BattleItem"> | string
    battleId?: StringFilter<"BattleItem"> | string
    fragranceId?: StringFilter<"BattleItem"> | string
    position?: IntFilter<"BattleItem"> | number
    votes?: IntFilter<"BattleItem"> | number
    winner?: BoolFilter<"BattleItem"> | boolean
  }

  export type AICategorFeedbackUpsertWithWhereUniqueWithoutFragranceInput = {
    where: AICategorFeedbackWhereUniqueInput
    update: XOR<AICategorFeedbackUpdateWithoutFragranceInput, AICategorFeedbackUncheckedUpdateWithoutFragranceInput>
    create: XOR<AICategorFeedbackCreateWithoutFragranceInput, AICategorFeedbackUncheckedCreateWithoutFragranceInput>
  }

  export type AICategorFeedbackUpdateWithWhereUniqueWithoutFragranceInput = {
    where: AICategorFeedbackWhereUniqueInput
    data: XOR<AICategorFeedbackUpdateWithoutFragranceInput, AICategorFeedbackUncheckedUpdateWithoutFragranceInput>
  }

  export type AICategorFeedbackUpdateManyWithWhereWithoutFragranceInput = {
    where: AICategorFeedbackScalarWhereInput
    data: XOR<AICategorFeedbackUpdateManyMutationInput, AICategorFeedbackUncheckedUpdateManyWithoutFragranceInput>
  }

  export type UserCreateWithoutCollectionsInput = {
    id?: string
    email: string
    username: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    battles?: BattleCreateNestedManyWithoutUserInput
    feedbacks?: AICategorFeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCollectionsInput = {
    id?: string
    email: string
    username: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    battles?: BattleUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: AICategorFeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCollectionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCollectionsInput, UserUncheckedCreateWithoutCollectionsInput>
  }

  export type CollectionItemCreateWithoutCollectionInput = {
    id?: string
    personalRating?: number | null
    personalNotes?: string | null
    purchaseDate?: Date | string | null
    bottleSize?: string | null
    createdAt?: Date | string
    fragrance: FragranceCreateNestedOneWithoutCollectionsInput
  }

  export type CollectionItemUncheckedCreateWithoutCollectionInput = {
    id?: string
    fragranceId: string
    personalRating?: number | null
    personalNotes?: string | null
    purchaseDate?: Date | string | null
    bottleSize?: string | null
    createdAt?: Date | string
  }

  export type CollectionItemCreateOrConnectWithoutCollectionInput = {
    where: CollectionItemWhereUniqueInput
    create: XOR<CollectionItemCreateWithoutCollectionInput, CollectionItemUncheckedCreateWithoutCollectionInput>
  }

  export type CollectionItemCreateManyCollectionInputEnvelope = {
    data: CollectionItemCreateManyCollectionInput | CollectionItemCreateManyCollectionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCollectionsInput = {
    update: XOR<UserUpdateWithoutCollectionsInput, UserUncheckedUpdateWithoutCollectionsInput>
    create: XOR<UserCreateWithoutCollectionsInput, UserUncheckedCreateWithoutCollectionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCollectionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCollectionsInput, UserUncheckedUpdateWithoutCollectionsInput>
  }

  export type UserUpdateWithoutCollectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    battles?: BattleUpdateManyWithoutUserNestedInput
    feedbacks?: AICategorFeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCollectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    battles?: BattleUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: AICategorFeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CollectionItemUpsertWithWhereUniqueWithoutCollectionInput = {
    where: CollectionItemWhereUniqueInput
    update: XOR<CollectionItemUpdateWithoutCollectionInput, CollectionItemUncheckedUpdateWithoutCollectionInput>
    create: XOR<CollectionItemCreateWithoutCollectionInput, CollectionItemUncheckedCreateWithoutCollectionInput>
  }

  export type CollectionItemUpdateWithWhereUniqueWithoutCollectionInput = {
    where: CollectionItemWhereUniqueInput
    data: XOR<CollectionItemUpdateWithoutCollectionInput, CollectionItemUncheckedUpdateWithoutCollectionInput>
  }

  export type CollectionItemUpdateManyWithWhereWithoutCollectionInput = {
    where: CollectionItemScalarWhereInput
    data: XOR<CollectionItemUpdateManyMutationInput, CollectionItemUncheckedUpdateManyWithoutCollectionInput>
  }

  export type CollectionCreateWithoutItemsInput = {
    id?: string
    name?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCollectionsInput
  }

  export type CollectionUncheckedCreateWithoutItemsInput = {
    id?: string
    userId: string
    name?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CollectionCreateOrConnectWithoutItemsInput = {
    where: CollectionWhereUniqueInput
    create: XOR<CollectionCreateWithoutItemsInput, CollectionUncheckedCreateWithoutItemsInput>
  }

  export type FragranceCreateWithoutCollectionsInput = {
    id?: string
    name: string
    brand: string
    year?: number | null
    concentration?: string | null
    topNotes?: FragranceCreatetopNotesInput | string[]
    middleNotes?: FragranceCreatemiddleNotesInput | string[]
    baseNotes?: FragranceCreatebaseNotesInput | string[]
    aiSeasons?: FragranceCreateaiSeasonsInput | string[]
    aiOccasions?: FragranceCreateaiOccasionsInput | string[]
    aiMoods?: FragranceCreateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceCreatefragranticaSeasonsInput | string[]
    communityRating?: number | null
    verified?: boolean
    longevity?: number | null
    sillage?: number | null
    projection?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    battleItems?: BattleItemCreateNestedManyWithoutFragranceInput
    feedbacks?: AICategorFeedbackCreateNestedManyWithoutFragranceInput
  }

  export type FragranceUncheckedCreateWithoutCollectionsInput = {
    id?: string
    name: string
    brand: string
    year?: number | null
    concentration?: string | null
    topNotes?: FragranceCreatetopNotesInput | string[]
    middleNotes?: FragranceCreatemiddleNotesInput | string[]
    baseNotes?: FragranceCreatebaseNotesInput | string[]
    aiSeasons?: FragranceCreateaiSeasonsInput | string[]
    aiOccasions?: FragranceCreateaiOccasionsInput | string[]
    aiMoods?: FragranceCreateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceCreatefragranticaSeasonsInput | string[]
    communityRating?: number | null
    verified?: boolean
    longevity?: number | null
    sillage?: number | null
    projection?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    battleItems?: BattleItemUncheckedCreateNestedManyWithoutFragranceInput
    feedbacks?: AICategorFeedbackUncheckedCreateNestedManyWithoutFragranceInput
  }

  export type FragranceCreateOrConnectWithoutCollectionsInput = {
    where: FragranceWhereUniqueInput
    create: XOR<FragranceCreateWithoutCollectionsInput, FragranceUncheckedCreateWithoutCollectionsInput>
  }

  export type CollectionUpsertWithoutItemsInput = {
    update: XOR<CollectionUpdateWithoutItemsInput, CollectionUncheckedUpdateWithoutItemsInput>
    create: XOR<CollectionCreateWithoutItemsInput, CollectionUncheckedCreateWithoutItemsInput>
    where?: CollectionWhereInput
  }

  export type CollectionUpdateToOneWithWhereWithoutItemsInput = {
    where?: CollectionWhereInput
    data: XOR<CollectionUpdateWithoutItemsInput, CollectionUncheckedUpdateWithoutItemsInput>
  }

  export type CollectionUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCollectionsNestedInput
  }

  export type CollectionUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FragranceUpsertWithoutCollectionsInput = {
    update: XOR<FragranceUpdateWithoutCollectionsInput, FragranceUncheckedUpdateWithoutCollectionsInput>
    create: XOR<FragranceCreateWithoutCollectionsInput, FragranceUncheckedCreateWithoutCollectionsInput>
    where?: FragranceWhereInput
  }

  export type FragranceUpdateToOneWithWhereWithoutCollectionsInput = {
    where?: FragranceWhereInput
    data: XOR<FragranceUpdateWithoutCollectionsInput, FragranceUncheckedUpdateWithoutCollectionsInput>
  }

  export type FragranceUpdateWithoutCollectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    topNotes?: FragranceUpdatetopNotesInput | string[]
    middleNotes?: FragranceUpdatemiddleNotesInput | string[]
    baseNotes?: FragranceUpdatebaseNotesInput | string[]
    aiSeasons?: FragranceUpdateaiSeasonsInput | string[]
    aiOccasions?: FragranceUpdateaiOccasionsInput | string[]
    aiMoods?: FragranceUpdateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceUpdatefragranticaSeasonsInput | string[]
    communityRating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    longevity?: NullableIntFieldUpdateOperationsInput | number | null
    sillage?: NullableIntFieldUpdateOperationsInput | number | null
    projection?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    battleItems?: BattleItemUpdateManyWithoutFragranceNestedInput
    feedbacks?: AICategorFeedbackUpdateManyWithoutFragranceNestedInput
  }

  export type FragranceUncheckedUpdateWithoutCollectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    topNotes?: FragranceUpdatetopNotesInput | string[]
    middleNotes?: FragranceUpdatemiddleNotesInput | string[]
    baseNotes?: FragranceUpdatebaseNotesInput | string[]
    aiSeasons?: FragranceUpdateaiSeasonsInput | string[]
    aiOccasions?: FragranceUpdateaiOccasionsInput | string[]
    aiMoods?: FragranceUpdateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceUpdatefragranticaSeasonsInput | string[]
    communityRating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    longevity?: NullableIntFieldUpdateOperationsInput | number | null
    sillage?: NullableIntFieldUpdateOperationsInput | number | null
    projection?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    battleItems?: BattleItemUncheckedUpdateManyWithoutFragranceNestedInput
    feedbacks?: AICategorFeedbackUncheckedUpdateManyWithoutFragranceNestedInput
  }

  export type UserCreateWithoutBattlesInput = {
    id?: string
    email: string
    username: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionCreateNestedManyWithoutUserInput
    feedbacks?: AICategorFeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBattlesInput = {
    id?: string
    email: string
    username: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: AICategorFeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBattlesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBattlesInput, UserUncheckedCreateWithoutBattlesInput>
  }

  export type BattleItemCreateWithoutBattleInput = {
    id?: string
    position: number
    votes?: number
    winner?: boolean
    fragrance: FragranceCreateNestedOneWithoutBattleItemsInput
  }

  export type BattleItemUncheckedCreateWithoutBattleInput = {
    id?: string
    fragranceId: string
    position: number
    votes?: number
    winner?: boolean
  }

  export type BattleItemCreateOrConnectWithoutBattleInput = {
    where: BattleItemWhereUniqueInput
    create: XOR<BattleItemCreateWithoutBattleInput, BattleItemUncheckedCreateWithoutBattleInput>
  }

  export type BattleItemCreateManyBattleInputEnvelope = {
    data: BattleItemCreateManyBattleInput | BattleItemCreateManyBattleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBattlesInput = {
    update: XOR<UserUpdateWithoutBattlesInput, UserUncheckedUpdateWithoutBattlesInput>
    create: XOR<UserCreateWithoutBattlesInput, UserUncheckedCreateWithoutBattlesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBattlesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBattlesInput, UserUncheckedUpdateWithoutBattlesInput>
  }

  export type UserUpdateWithoutBattlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionUpdateManyWithoutUserNestedInput
    feedbacks?: AICategorFeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBattlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: AICategorFeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BattleItemUpsertWithWhereUniqueWithoutBattleInput = {
    where: BattleItemWhereUniqueInput
    update: XOR<BattleItemUpdateWithoutBattleInput, BattleItemUncheckedUpdateWithoutBattleInput>
    create: XOR<BattleItemCreateWithoutBattleInput, BattleItemUncheckedCreateWithoutBattleInput>
  }

  export type BattleItemUpdateWithWhereUniqueWithoutBattleInput = {
    where: BattleItemWhereUniqueInput
    data: XOR<BattleItemUpdateWithoutBattleInput, BattleItemUncheckedUpdateWithoutBattleInput>
  }

  export type BattleItemUpdateManyWithWhereWithoutBattleInput = {
    where: BattleItemScalarWhereInput
    data: XOR<BattleItemUpdateManyMutationInput, BattleItemUncheckedUpdateManyWithoutBattleInput>
  }

  export type BattleCreateWithoutItemsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.BattleStatus
    createdAt?: Date | string
    completedAt?: Date | string | null
    user: UserCreateNestedOneWithoutBattlesInput
  }

  export type BattleUncheckedCreateWithoutItemsInput = {
    id?: string
    userId: string
    title: string
    description?: string | null
    status?: $Enums.BattleStatus
    createdAt?: Date | string
    completedAt?: Date | string | null
  }

  export type BattleCreateOrConnectWithoutItemsInput = {
    where: BattleWhereUniqueInput
    create: XOR<BattleCreateWithoutItemsInput, BattleUncheckedCreateWithoutItemsInput>
  }

  export type FragranceCreateWithoutBattleItemsInput = {
    id?: string
    name: string
    brand: string
    year?: number | null
    concentration?: string | null
    topNotes?: FragranceCreatetopNotesInput | string[]
    middleNotes?: FragranceCreatemiddleNotesInput | string[]
    baseNotes?: FragranceCreatebaseNotesInput | string[]
    aiSeasons?: FragranceCreateaiSeasonsInput | string[]
    aiOccasions?: FragranceCreateaiOccasionsInput | string[]
    aiMoods?: FragranceCreateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceCreatefragranticaSeasonsInput | string[]
    communityRating?: number | null
    verified?: boolean
    longevity?: number | null
    sillage?: number | null
    projection?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionItemCreateNestedManyWithoutFragranceInput
    feedbacks?: AICategorFeedbackCreateNestedManyWithoutFragranceInput
  }

  export type FragranceUncheckedCreateWithoutBattleItemsInput = {
    id?: string
    name: string
    brand: string
    year?: number | null
    concentration?: string | null
    topNotes?: FragranceCreatetopNotesInput | string[]
    middleNotes?: FragranceCreatemiddleNotesInput | string[]
    baseNotes?: FragranceCreatebaseNotesInput | string[]
    aiSeasons?: FragranceCreateaiSeasonsInput | string[]
    aiOccasions?: FragranceCreateaiOccasionsInput | string[]
    aiMoods?: FragranceCreateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceCreatefragranticaSeasonsInput | string[]
    communityRating?: number | null
    verified?: boolean
    longevity?: number | null
    sillage?: number | null
    projection?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionItemUncheckedCreateNestedManyWithoutFragranceInput
    feedbacks?: AICategorFeedbackUncheckedCreateNestedManyWithoutFragranceInput
  }

  export type FragranceCreateOrConnectWithoutBattleItemsInput = {
    where: FragranceWhereUniqueInput
    create: XOR<FragranceCreateWithoutBattleItemsInput, FragranceUncheckedCreateWithoutBattleItemsInput>
  }

  export type BattleUpsertWithoutItemsInput = {
    update: XOR<BattleUpdateWithoutItemsInput, BattleUncheckedUpdateWithoutItemsInput>
    create: XOR<BattleCreateWithoutItemsInput, BattleUncheckedCreateWithoutItemsInput>
    where?: BattleWhereInput
  }

  export type BattleUpdateToOneWithWhereWithoutItemsInput = {
    where?: BattleWhereInput
    data: XOR<BattleUpdateWithoutItemsInput, BattleUncheckedUpdateWithoutItemsInput>
  }

  export type BattleUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutBattlesNestedInput
  }

  export type BattleUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FragranceUpsertWithoutBattleItemsInput = {
    update: XOR<FragranceUpdateWithoutBattleItemsInput, FragranceUncheckedUpdateWithoutBattleItemsInput>
    create: XOR<FragranceCreateWithoutBattleItemsInput, FragranceUncheckedCreateWithoutBattleItemsInput>
    where?: FragranceWhereInput
  }

  export type FragranceUpdateToOneWithWhereWithoutBattleItemsInput = {
    where?: FragranceWhereInput
    data: XOR<FragranceUpdateWithoutBattleItemsInput, FragranceUncheckedUpdateWithoutBattleItemsInput>
  }

  export type FragranceUpdateWithoutBattleItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    topNotes?: FragranceUpdatetopNotesInput | string[]
    middleNotes?: FragranceUpdatemiddleNotesInput | string[]
    baseNotes?: FragranceUpdatebaseNotesInput | string[]
    aiSeasons?: FragranceUpdateaiSeasonsInput | string[]
    aiOccasions?: FragranceUpdateaiOccasionsInput | string[]
    aiMoods?: FragranceUpdateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceUpdatefragranticaSeasonsInput | string[]
    communityRating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    longevity?: NullableIntFieldUpdateOperationsInput | number | null
    sillage?: NullableIntFieldUpdateOperationsInput | number | null
    projection?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionItemUpdateManyWithoutFragranceNestedInput
    feedbacks?: AICategorFeedbackUpdateManyWithoutFragranceNestedInput
  }

  export type FragranceUncheckedUpdateWithoutBattleItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    topNotes?: FragranceUpdatetopNotesInput | string[]
    middleNotes?: FragranceUpdatemiddleNotesInput | string[]
    baseNotes?: FragranceUpdatebaseNotesInput | string[]
    aiSeasons?: FragranceUpdateaiSeasonsInput | string[]
    aiOccasions?: FragranceUpdateaiOccasionsInput | string[]
    aiMoods?: FragranceUpdateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceUpdatefragranticaSeasonsInput | string[]
    communityRating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    longevity?: NullableIntFieldUpdateOperationsInput | number | null
    sillage?: NullableIntFieldUpdateOperationsInput | number | null
    projection?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionItemUncheckedUpdateManyWithoutFragranceNestedInput
    feedbacks?: AICategorFeedbackUncheckedUpdateManyWithoutFragranceNestedInput
  }

  export type UserCreateWithoutFeedbacksInput = {
    id?: string
    email: string
    username: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionCreateNestedManyWithoutUserInput
    battles?: BattleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeedbacksInput = {
    id?: string
    email: string
    username: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionUncheckedCreateNestedManyWithoutUserInput
    battles?: BattleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeedbacksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
  }

  export type FragranceCreateWithoutFeedbacksInput = {
    id?: string
    name: string
    brand: string
    year?: number | null
    concentration?: string | null
    topNotes?: FragranceCreatetopNotesInput | string[]
    middleNotes?: FragranceCreatemiddleNotesInput | string[]
    baseNotes?: FragranceCreatebaseNotesInput | string[]
    aiSeasons?: FragranceCreateaiSeasonsInput | string[]
    aiOccasions?: FragranceCreateaiOccasionsInput | string[]
    aiMoods?: FragranceCreateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceCreatefragranticaSeasonsInput | string[]
    communityRating?: number | null
    verified?: boolean
    longevity?: number | null
    sillage?: number | null
    projection?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionItemCreateNestedManyWithoutFragranceInput
    battleItems?: BattleItemCreateNestedManyWithoutFragranceInput
  }

  export type FragranceUncheckedCreateWithoutFeedbacksInput = {
    id?: string
    name: string
    brand: string
    year?: number | null
    concentration?: string | null
    topNotes?: FragranceCreatetopNotesInput | string[]
    middleNotes?: FragranceCreatemiddleNotesInput | string[]
    baseNotes?: FragranceCreatebaseNotesInput | string[]
    aiSeasons?: FragranceCreateaiSeasonsInput | string[]
    aiOccasions?: FragranceCreateaiOccasionsInput | string[]
    aiMoods?: FragranceCreateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceCreatefragranticaSeasonsInput | string[]
    communityRating?: number | null
    verified?: boolean
    longevity?: number | null
    sillage?: number | null
    projection?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionItemUncheckedCreateNestedManyWithoutFragranceInput
    battleItems?: BattleItemUncheckedCreateNestedManyWithoutFragranceInput
  }

  export type FragranceCreateOrConnectWithoutFeedbacksInput = {
    where: FragranceWhereUniqueInput
    create: XOR<FragranceCreateWithoutFeedbacksInput, FragranceUncheckedCreateWithoutFeedbacksInput>
  }

  export type UserUpsertWithoutFeedbacksInput = {
    update: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type UserUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionUpdateManyWithoutUserNestedInput
    battles?: BattleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionUncheckedUpdateManyWithoutUserNestedInput
    battles?: BattleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FragranceUpsertWithoutFeedbacksInput = {
    update: XOR<FragranceUpdateWithoutFeedbacksInput, FragranceUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<FragranceCreateWithoutFeedbacksInput, FragranceUncheckedCreateWithoutFeedbacksInput>
    where?: FragranceWhereInput
  }

  export type FragranceUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: FragranceWhereInput
    data: XOR<FragranceUpdateWithoutFeedbacksInput, FragranceUncheckedUpdateWithoutFeedbacksInput>
  }

  export type FragranceUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    topNotes?: FragranceUpdatetopNotesInput | string[]
    middleNotes?: FragranceUpdatemiddleNotesInput | string[]
    baseNotes?: FragranceUpdatebaseNotesInput | string[]
    aiSeasons?: FragranceUpdateaiSeasonsInput | string[]
    aiOccasions?: FragranceUpdateaiOccasionsInput | string[]
    aiMoods?: FragranceUpdateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceUpdatefragranticaSeasonsInput | string[]
    communityRating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    longevity?: NullableIntFieldUpdateOperationsInput | number | null
    sillage?: NullableIntFieldUpdateOperationsInput | number | null
    projection?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionItemUpdateManyWithoutFragranceNestedInput
    battleItems?: BattleItemUpdateManyWithoutFragranceNestedInput
  }

  export type FragranceUncheckedUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    topNotes?: FragranceUpdatetopNotesInput | string[]
    middleNotes?: FragranceUpdatemiddleNotesInput | string[]
    baseNotes?: FragranceUpdatebaseNotesInput | string[]
    aiSeasons?: FragranceUpdateaiSeasonsInput | string[]
    aiOccasions?: FragranceUpdateaiOccasionsInput | string[]
    aiMoods?: FragranceUpdateaiMoodsInput | string[]
    fragranticaSeasons?: FragranceUpdatefragranticaSeasonsInput | string[]
    communityRating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    longevity?: NullableIntFieldUpdateOperationsInput | number | null
    sillage?: NullableIntFieldUpdateOperationsInput | number | null
    projection?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionItemUncheckedUpdateManyWithoutFragranceNestedInput
    battleItems?: BattleItemUncheckedUpdateManyWithoutFragranceNestedInput
  }

  export type CollectionCreateManyUserInput = {
    id?: string
    name?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BattleCreateManyUserInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.BattleStatus
    createdAt?: Date | string
    completedAt?: Date | string | null
  }

  export type AICategorFeedbackCreateManyUserInput = {
    id?: string
    fragranceId: string
    aiSuggestion: JsonNullValueInput | InputJsonValue
    userCorrection: JsonNullValueInput | InputJsonValue
    feedbackType: string
    createdAt?: Date | string
  }

  export type CollectionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: CollectionItemUpdateManyWithoutCollectionNestedInput
  }

  export type CollectionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: CollectionItemUncheckedUpdateManyWithoutCollectionNestedInput
  }

  export type CollectionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BattleUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    items?: BattleItemUpdateManyWithoutBattleNestedInput
  }

  export type BattleUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    items?: BattleItemUncheckedUpdateManyWithoutBattleNestedInput
  }

  export type BattleUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AICategorFeedbackUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    aiSuggestion?: JsonNullValueInput | InputJsonValue
    userCorrection?: JsonNullValueInput | InputJsonValue
    feedbackType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fragrance?: FragranceUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type AICategorFeedbackUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fragranceId?: StringFieldUpdateOperationsInput | string
    aiSuggestion?: JsonNullValueInput | InputJsonValue
    userCorrection?: JsonNullValueInput | InputJsonValue
    feedbackType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AICategorFeedbackUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fragranceId?: StringFieldUpdateOperationsInput | string
    aiSuggestion?: JsonNullValueInput | InputJsonValue
    userCorrection?: JsonNullValueInput | InputJsonValue
    feedbackType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionItemCreateManyFragranceInput = {
    id?: string
    collectionId: string
    personalRating?: number | null
    personalNotes?: string | null
    purchaseDate?: Date | string | null
    bottleSize?: string | null
    createdAt?: Date | string
  }

  export type BattleItemCreateManyFragranceInput = {
    id?: string
    battleId: string
    position: number
    votes?: number
    winner?: boolean
  }

  export type AICategorFeedbackCreateManyFragranceInput = {
    id?: string
    userId: string
    aiSuggestion: JsonNullValueInput | InputJsonValue
    userCorrection: JsonNullValueInput | InputJsonValue
    feedbackType: string
    createdAt?: Date | string
  }

  export type CollectionItemUpdateWithoutFragranceInput = {
    id?: StringFieldUpdateOperationsInput | string
    personalRating?: NullableIntFieldUpdateOperationsInput | number | null
    personalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bottleSize?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collection?: CollectionUpdateOneRequiredWithoutItemsNestedInput
  }

  export type CollectionItemUncheckedUpdateWithoutFragranceInput = {
    id?: StringFieldUpdateOperationsInput | string
    collectionId?: StringFieldUpdateOperationsInput | string
    personalRating?: NullableIntFieldUpdateOperationsInput | number | null
    personalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bottleSize?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionItemUncheckedUpdateManyWithoutFragranceInput = {
    id?: StringFieldUpdateOperationsInput | string
    collectionId?: StringFieldUpdateOperationsInput | string
    personalRating?: NullableIntFieldUpdateOperationsInput | number | null
    personalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bottleSize?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BattleItemUpdateWithoutFragranceInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    winner?: BoolFieldUpdateOperationsInput | boolean
    battle?: BattleUpdateOneRequiredWithoutItemsNestedInput
  }

  export type BattleItemUncheckedUpdateWithoutFragranceInput = {
    id?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    winner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BattleItemUncheckedUpdateManyWithoutFragranceInput = {
    id?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    winner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AICategorFeedbackUpdateWithoutFragranceInput = {
    id?: StringFieldUpdateOperationsInput | string
    aiSuggestion?: JsonNullValueInput | InputJsonValue
    userCorrection?: JsonNullValueInput | InputJsonValue
    feedbackType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type AICategorFeedbackUncheckedUpdateWithoutFragranceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    aiSuggestion?: JsonNullValueInput | InputJsonValue
    userCorrection?: JsonNullValueInput | InputJsonValue
    feedbackType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AICategorFeedbackUncheckedUpdateManyWithoutFragranceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    aiSuggestion?: JsonNullValueInput | InputJsonValue
    userCorrection?: JsonNullValueInput | InputJsonValue
    feedbackType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionItemCreateManyCollectionInput = {
    id?: string
    fragranceId: string
    personalRating?: number | null
    personalNotes?: string | null
    purchaseDate?: Date | string | null
    bottleSize?: string | null
    createdAt?: Date | string
  }

  export type CollectionItemUpdateWithoutCollectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    personalRating?: NullableIntFieldUpdateOperationsInput | number | null
    personalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bottleSize?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fragrance?: FragranceUpdateOneRequiredWithoutCollectionsNestedInput
  }

  export type CollectionItemUncheckedUpdateWithoutCollectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    fragranceId?: StringFieldUpdateOperationsInput | string
    personalRating?: NullableIntFieldUpdateOperationsInput | number | null
    personalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bottleSize?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionItemUncheckedUpdateManyWithoutCollectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    fragranceId?: StringFieldUpdateOperationsInput | string
    personalRating?: NullableIntFieldUpdateOperationsInput | number | null
    personalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bottleSize?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BattleItemCreateManyBattleInput = {
    id?: string
    fragranceId: string
    position: number
    votes?: number
    winner?: boolean
  }

  export type BattleItemUpdateWithoutBattleInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    winner?: BoolFieldUpdateOperationsInput | boolean
    fragrance?: FragranceUpdateOneRequiredWithoutBattleItemsNestedInput
  }

  export type BattleItemUncheckedUpdateWithoutBattleInput = {
    id?: StringFieldUpdateOperationsInput | string
    fragranceId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    winner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BattleItemUncheckedUpdateManyWithoutBattleInput = {
    id?: StringFieldUpdateOperationsInput | string
    fragranceId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    winner?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FragranceCountOutputTypeDefaultArgs instead
     */
    export type FragranceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FragranceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollectionCountOutputTypeDefaultArgs instead
     */
    export type CollectionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollectionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BattleCountOutputTypeDefaultArgs instead
     */
    export type BattleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BattleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FragranceDefaultArgs instead
     */
    export type FragranceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FragranceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollectionDefaultArgs instead
     */
    export type CollectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollectionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollectionItemDefaultArgs instead
     */
    export type CollectionItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollectionItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BattleDefaultArgs instead
     */
    export type BattleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BattleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BattleItemDefaultArgs instead
     */
    export type BattleItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BattleItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AICategorFeedbackDefaultArgs instead
     */
    export type AICategorFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AICategorFeedbackDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}