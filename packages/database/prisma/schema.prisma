// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  passwordHash  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  collections   Collection[]
  battles       Battle[]
  feedbacks     AICategorFeedback[]

  @@map("users")
}

model Fragrance {
  id              String    @id @default(cuid())
  name            String
  brand           String
  year            Int?
  concentration   String?   // EDT, EDP, Parfum, etc.

  // Notes structure
  topNotes        String[]
  middleNotes     String[]
  baseNotes       String[]

  // AI Categorization
  aiSeasons       String[]  // Spring, Summer, Fall, Winter
  aiOccasions     String[]  // Daily, Evening, Formal, Casual
  aiMoods         String[]  // Fresh, Confident, Sophisticated

  // Real-world data validation
  fragranticaSeasons    String[]
  communityRating       Float?
  verified              Boolean @default(false)

  // Performance metrics
  longevity       Int?      // 1-10 scale
  sillage         Int?      // 1-10 scale
  projection      Int?      // 1-10 scale

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  collections     CollectionItem[]
  battleItems     BattleItem[]
  feedbacks       AICategorFeedback[]

  @@map("fragrances")
}

model Collection {
  id          String    @id @default(cuid())
  userId      String
  name        String    @default("My Collection")
  description String?

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       CollectionItem[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("collections")
}

model CollectionItem {
  id           String     @id @default(cuid())
  collectionId String
  fragranceId  String

  // Personal notes
  personalRating     Int?         // 1-10
  personalNotes      String?
  purchaseDate       DateTime?
  bottleSize         String?      // 30ml, 50ml, 100ml

  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  fragrance    Fragrance  @relation(fields: [fragranceId], references: [id], onDelete: Cascade)

  createdAt    DateTime   @default(now())

  @@unique([collectionId, fragranceId])
  @@map("collection_items")
}

model Battle {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  status      BattleStatus @default(ACTIVE)

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       BattleItem[]

  createdAt   DateTime     @default(now())
  completedAt DateTime?

  @@map("battles")
}

model BattleItem {
  id          String    @id @default(cuid())
  battleId    String
  fragranceId String
  position    Int       // For ordering in battle
  votes       Int       @default(0)
  winner      Boolean   @default(false)

  battle      Battle    @relation(fields: [battleId], references: [id], onDelete: Cascade)
  fragrance   Fragrance @relation(fields: [fragranceId], references: [id], onDelete: Cascade)

  @@unique([battleId, fragranceId])
  @@map("battle_items")
}

model AICategorFeedback {
  id            String    @id @default(cuid())
  userId        String
  fragranceId   String

  // What AI suggested vs what user corrected
  aiSuggestion  Json      // Store original AI categorization
  userCorrection Json     // Store user's correction
  feedbackType  String    // "season", "occasion", "mood"

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fragrance     Fragrance @relation(fields: [fragranceId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())

  @@map("ai_categor_feedbacks")
}

enum BattleStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}
