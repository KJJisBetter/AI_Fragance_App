generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String              @id @default(cuid())
  email        String              @unique
  username     String              @unique
  passwordHash String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  feedbacks    AICategorFeedback[]
  battles      Battle[]
  collections  Collection[]
  reviews      Review[]
  userCollections UserCollection[]

  @@map("users")
}

model Fragrance {
  id                 String              @id @default(cuid())
  name               String
  brand              String
  year               Int?
  concentration      String?
  topNotes           String[]
  middleNotes        String[]
  baseNotes          String[]
  aiSeasons          String[]
  aiOccasions        String[]
  aiMoods            String[]
  fragranticaSeasons String[]
  communityRating    Float?
  verified           Boolean             @default(false)
  longevity          Int?
  sillage            Int?
  projection         Int?
  prestigeScore      Float?              @default(0)  // Prestige score (community + brand + verification + age + notes)
  popularityScore    Float?              @default(0)  // Sales-based popularity (market share + trends + availability)
  relevanceScore     Float               @default(0)  // New relevance scoring for better search results
  lastEnhanced       DateTime?                        // Track when relevance was last calculated

  // Market Intelligence Fields
  marketPriority     Float?              @default(0)  // 0.0-1.0 priority based on brand tiers
  trending           Boolean             @default(false) // Based on 2025 market data
  targetDemographic  String?             // gen_z, budget_conscious, niche_enthusiast, mainstream
  viralScore         Float?              @default(0)  // TikTok/social media virality

  // API Integration Fields
  externalId         String?             @unique      // Perfumero API ID
  perfumeroPid       String?             // Legacy field, can be migrated
  dataSource         String?             @default("manual") // manual, perfumero_api, perfumero_api_promoted, api_only
  populatedAt        DateTime?           // When populated from API
  promotedAt         DateTime?           // When promoted from API to database
  promotionReason    String?             // tier1_brand, high_rating, popular, trending, quality_profile
  isApiOnly          Boolean             @default(false) // Flag for cold storage items

  // Data Quality Fields
  dataQuality        Float?              @default(0)  // 0.0-1.0 quality score
  hasRedundantName   Boolean             @default(false) // e.g., "Oscar Oscar de la Renta"
  hasYearInName      Boolean             @default(false) // e.g., "Sauvage 2015"
  hasConcentrationInName Boolean         @default(false) // e.g., "Bleu de Chanel EDT"

  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  feedbacks          AICategorFeedback[]
  battleItems        BattleItem[]
  collections        CollectionItem[]
  reviews            Review[]             // Add relationship for engagement tracking
  userCollections    UserCollection[]     // Add relationship for collection tracking

  // Performance indexes for search operations
  @@index([name])
  @@index([brand])
  @@index([communityRating(sort: Desc)])
  @@index([prestigeScore(sort: Desc)])
  @@index([popularityScore(sort: Desc)])
  @@index([relevanceScore(sort: Desc)])  // New index for relevance scoring
  @@index([marketPriority(sort: Desc)])  // New index for market priority
  @@index([trending])                    // New index for trending fragrances
  @@index([targetDemographic])           // New index for demographic targeting
  @@index([dataSource])                  // New index for data source filtering
  @@index([externalId])                  // New index for API lookups
  @@index([aiSeasons], type: Gin)
  @@index([aiOccasions], type: Gin)
  @@index([aiMoods], type: Gin)
  @@index([year])
  @@index([concentration])
  @@index([verified])
  @@index([brand, year])
  @@index([createdAt])
  @@map("fragrances")
}

model BrandPrestige {
  id           String   @id @default(cuid())
  brand        String   @unique
  tier         String   // luxury, high-end-designer, designer, niche, mass-market, unknown
  priceRange   String   // under-50, 50-150, 150-300, 300-500, 500+, unknown
  confidence   Float    // 0.1-1.0 confidence score from AI
  reasoning    String   // Brief explanation from AI
  researchedAt DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([tier])
  @@index([brand])
  @@map("brand_prestige")
}

model Collection {
  id          String           @id @default(cuid())
  userId      String
  name        String           @default("My Collection")
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  items       CollectionItem[]
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("collections")
}

model CollectionItem {
  id             String     @id @default(cuid())
  collectionId   String
  fragranceId    String
  personalRating Int?
  personalNotes  String?
  purchaseDate   DateTime?
  bottleSize     String?
  createdAt      DateTime   @default(now())
  collection     Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  fragrance      Fragrance  @relation(fields: [fragranceId], references: [id], onDelete: Cascade)

  @@unique([collectionId, fragranceId])
  @@map("collection_items")
}

model Battle {
  id          String       @id @default(cuid())
  userId      String
  title       String
  description String?
  status      BattleStatus @default(ACTIVE)
  createdAt   DateTime     @default(now())
  completedAt DateTime?
  items       BattleItem[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("battles")
}

model BattleItem {
  id          String    @id @default(cuid())
  battleId    String
  fragranceId String
  position    Int
  votes       Int       @default(0)
  winner      Boolean   @default(false)
  battle      Battle    @relation(fields: [battleId], references: [id], onDelete: Cascade)
  fragrance   Fragrance @relation(fields: [fragranceId], references: [id], onDelete: Cascade)

  @@unique([battleId, fragranceId])
  @@map("battle_items")
}

model AICategorFeedback {
  id             String    @id @default(cuid())
  userId         String
  fragranceId    String
  aiSuggestion   Json
  userCorrection Json
  feedbackType   String
  createdAt      DateTime  @default(now())
  fragrance      Fragrance @relation(fields: [fragranceId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_categor_feedbacks")
}

enum BattleStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum BrandTier {
  LUXURY
  HIGH_END_DESIGNER
  DESIGNER
  NICHE
  MASS_MARKET
  UNKNOWN
}

enum PriceRange {
  UNDER_50
  RANGE_50_150
  RANGE_150_300
  RANGE_300_500
  OVER_500
  UNKNOWN
}

model ArchivedFragrance {
  id             String   @id @default(cuid())
  originalId     String
  name           String
  brand          String
  year           Int?
  concentration  String?
  topNotes       String[]
  middleNotes    String[]
  baseNotes      String[]
  archivedAt     DateTime @default(now())
  reason         String   // quality_and_market_purge_2025, duplicate, low_quality, etc.
  recoverable    Boolean  @default(false)
  metadata       Json?    // Store any additional data for recovery

  @@index([originalId])
  @@index([name])
  @@index([brand])
  @@index([archivedAt])
  @@index([reason])
  @@map("archived_fragrances")
}

model Review {
  id          String    @id @default(cuid())
  userId      String
  fragranceId String
  rating      Float
  content     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fragrance   Fragrance @relation(fields: [fragranceId], references: [id], onDelete: Cascade)

  @@unique([userId, fragranceId])
  @@map("reviews")
}

model UserCollection {
  id          String    @id @default(cuid())
  userId      String
  fragranceId String
  type        String    // owned, wishlist, tested, etc.
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fragrance   Fragrance @relation(fields: [fragranceId], references: [id], onDelete: Cascade)

  @@unique([userId, fragranceId, type])
  @@map("user_collections")
}
